<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/en/1243066710.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page archives</span><br><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Unity之Shader系列 | 持续更新中...</title>
    <url>/cn/508188947.html</url>
    <content><![CDATA[<p>[TOP]</p>
<ul>
<li><a href="https://tdou.cc/cn/Shader-01.html" target="_blank" rel="noopener">Shader-01-启蒙</a></li>
</ul>
]]></content>
      <categories>
        <category>Unity-Shader</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 总览 | github page&amp;coding部署 travis-ci 持续集成 seo 评论 搜索 统计 广告 Url优化</title>
    <url>/cn/hexo.html</url>
    <content><![CDATA[<p>持续更新中 . . .</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>此项目为 Hexo + replica 主题制作 依托于github 和 coding部署使用</p>
<blockquote>
<p>github地址: <a href="https://github.com/t-dou/tdou.cc" target="_blank" rel="noopener">https://github.com/t-dou/tdou.cc</a></p>
</blockquote>
<ul>
<li><input checked disabled type="checkbox"> 基于 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> + <a href="https://github.com/sabrinaluo/hexo-theme-replica" target="_blank" rel="noopener">Hexo 主题 replica</a>实现站点以及md文章编写</li>
<li><input checked disabled type="checkbox"> 基于 <a href="https://github.com" target="_blank" rel="noopener">github page</a> 和 <a href="https://coding.net" target="_blank" rel="noopener">coding</a> 实现代码托管和部署</li>
<li><input checked disabled type="checkbox"> [自动化部署] 基于<a href="https://travis-ci.com" target="_blank" rel="noopener">travis-ci</a> 自动化部署 push github:master代码后即可自动部署  github:gh-page &amp; coding</li>
<li><input checked disabled type="checkbox"> [SEO] 使用GULP 进行代码压缩</li>
<li><input checked disabled type="checkbox"> [SEO] 站点地图 百度=html、google=xml </li>
<li><input checked disabled type="checkbox"> [SEO] robots.txt 站点机器人爬取规则 更快收录 <a href="http://tool.chinaz.com/robots/" target="_blank" rel="noopener">自动生成web工具</a></li>
<li><input checked disabled type="checkbox"> [SEO] 基于七牛图床实现图片存储,基于<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo</a>实现图片管理 需要已经备案的域名</li>
<li><input checked disabled type="checkbox"> [评论] <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a></li>
<li><input checked disabled type="checkbox"> <a href="https://search.google.com/" target="_blank" rel="noopener">Google搜索</a></li>
<li><input checked disabled type="checkbox"> [统计] <a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>、<a href="https://google.com/analytics/" target="_blank" rel="noopener">Google Analytics</a>、<a href="http://www.flagcounter.com/" target="_blank" rel="noopener">访客统计FlagCounter</a> <a href="https://blog.csdn.net/kl28978113/article/details/79500217" target="_blank" rel="noopener">教程</a></li>
<li><input checked disabled type="checkbox"> [站点广告] <a href="https://www.google.com/adsense/" target="_blank" rel="noopener">google adscene</a></li>
<li><input checked disabled type="checkbox"> [SEO] 文章URL优化</li>
<li><input disabled type="checkbox"> [SEO] 关键字优化,外链</li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>SEO - <a href="https://tdou.cc/cn/hexo_seo_url.html" target="_blank" rel="noopener">Hexo搭建博客之Url优化</a></li>
<li><a href="https://tdou.cc_cn/hexo_config.html" target="_blank" rel="noopener">Hexo搭建博客之站点配置文件详解</a></li>
</ul>
<h1 id="菜鸟式搭建教程"><a href="#菜鸟式搭建教程" class="headerlink" title="菜鸟式搭建教程"></a>菜鸟式搭建教程</h1><ul>
<li><p>v0.0.1 目标: 实现 Hexo主题+GitHub部署</p>
</li>
<li><p>v0.0.2 目标: 实现 Travis-ci 持续集成</p>
</li>
<li><p>v0.0.3 目标: 实现 Coding同步Github部署</p>
</li>
<li><p>v0.0.4 目标: 实现 域名绑定Github 以及 CHAME同时解析CODING</p>
</li>
<li><p>SEO 优化</p>
<ul>
<li>v0.0.x.配置 目标: 实现 GULP 压缩以及Travis-ci 的自动部署</li>
<li>v0.0.x.配置 目标: 站点地图配置</li>
<li>v0.0.x.配置 目标: robots.txt   </li>
</ul>
</li>
<li><p>其他自定义配置</p>
<ul>
<li>v0.0.x.配置[建议] 统计配置</li>
<li>v0.0.x.配置[非必须] 评论配置</li>
<li>v0.0.x.配置[自行决定] SEO 七牛图床</li>
</ul>
</li>
</ul>
<h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><ul>
<li>敬请期待: <a href="https://tdou.cc/" target="_blank" rel="noopener">如何使用Git以及在Github创建一个代码仓库</a></li>
</ul>
<h2 id="附加其他"><a href="#附加其他" class="headerlink" title="附加其他"></a>附加其他</h2><ul>
<li><p>主题:(social)链接 左侧个人信息无法添加其他的图标+链接对应解决方案</p>
<ul>
<li>Q1-更改左侧intro信息链接脚本路径 */themes/replica/layout/intro.ejs<ul>
<li>Q: 因主题icon基于 <a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/faicons/</a> 获取的图标，部分图片开源库中没有,导致无法引用链接,例:csdn、博客园、知乎、简书</li>
<li>A: 找到替换方案 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a>, 使用方式:<a href="https://www.jianshu.com/p/5d4a39cdf96d" target="_blank" rel="noopener">https://www.jianshu.com/p/5d4a39cdf96d</a></li>
</ul>
</li>
<li>Q2-更改页脚菜单中链接脚本路径 */themes/replica/layout/_partial/footer.ejs</li>
</ul>
</li>
<li><p>博客站点 <a href="http://tdou.cc/" target="_blank" rel="noopener">http://tdou.cc</a></p>
</li>
</ul>
<p>github源代码开源地址 : <a href="https://github.com/t-dou/tdou.cc" target="_blank" rel="noopener">https://github.com/t-dou/tdou.cc</a></p>
<blockquote>
<p>master分支为存放 hexo源项目+md博文<br>gh-pages 分支存放为 travis-ci 自动生成的html文件</p>
</blockquote>
<p>主项目的主题以子模块方式引用 地址: <a href="https://github.com/T-Dou/hexo-theme-replica" target="_blank" rel="noopener">https://github.com/T-Dou/hexo-theme-replica</a></p>
]]></content>
      <categories>
        <category>博博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>travis-ci</tag>
        <tag>SEO</tag>
        <tag>hexo-replica</tag>
        <tag>disqus</tag>
        <tag>评论</tag>
        <tag>google-search</tag>
        <tag>百度统计</tag>
        <tag>Google-Analytics</tag>
        <tag>FlagCounter</tag>
        <tag>Google-AdScene</tag>
      </tags>
  </entry>
  <entry>
    <title>网站日志</title>
    <url>/cn/changelog.html</url>
    <content><![CDATA[<ul>
<li><p>2019.11.12</p>
<ul>
<li><a href="https://blog.csdn.net/qq_32454537/article/details/79482914" target="_blank" rel="noopener">百度收录</a> 因域名无法备案 百度不收录 百度某一时间点做百度快照</li>
</ul>
</li>
<li><p>2019.09.06</p>
<ul>
<li>google adscene 正式使用</li>
<li>基于picgo 七牛图床实现图片管理 <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">参考</a></li>
</ul>
</li>
<li><p>2019.08.19</p>
<ul>
<li>添加搜索生成插件 <a href="https://www.itfanr.cc/2017/10/27/add-search-function-to-hexo-blog/" target="_blank" rel="noopener">参考</a></li>
<li>整理项目结构区分多语言版本</li>
<li>添加 <a href="https://www.google.com/adsense" target="_blank" rel="noopener">google-adscene</a> (未测试)</li>
</ul>
</li>
<li><p>2019.08.11</p>
<ul>
<li>百度统计 &amp; Google Analytics</li>
<li>Google Custom Search Engine^1</li>
<li><a href="https://www.jianshu.com/p/d68de067ea74?open_source=weibo_search" target="_blank" rel="noopener">Disqus</a> </li>
</ul>
</li>
<li><p>2019.08.08</p>
<ul>
<li>travis 部署使用gulp压缩</li>
</ul>
</li>
<li><p>2019.08.06</p>
<ol>
<li>解决travis 部署相关问题<ul>
<li>travis显示部署但访问404 [问题:无主题,子模块方式加入]</li>
</ul>
</li>
</ol>
</li>
<li><p>2019.08.03-2019.08.05</p>
<ol>
<li>解决travis 部署相关问题<ul>
<li>ssh无法部署成功,切换token方式</li>
<li>github 域名无法解析 [问题:CNAME]</li>
<li>基于token实现 github coding同时部署</li>
</ul>
</li>
</ol>
</li>
<li><p>2019.08.03</p>
<ol>
<li>基于replica v2.1.0 完成基础功能并接入</li>
<li>接入持续集成自动部署方案 travis</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/cn/about.html</url>
    <content><![CDATA[<p>~~ 您的内心飘过一万个 *** </p>
<p>这他喵的肿么会是空的呢 ？</p>
<p>没错 我懒<del>~</del></p>
<p>去我的新站点看看吧</p>
<p><a href="https://blog.t-dou.net" target="_blank" rel="noopener">https://blog.t-dou.net</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo-同时部署Github&amp;coding证书过期申请失败原因以及解决方案</title>
    <url>/cn/4195271328.html</url>
    <content><![CDATA[<h1 id="前沿（吹牛逼）"><a href="#前沿（吹牛逼）" class="headerlink" title="前沿（吹牛逼）"></a>前沿（吹牛逼）</h1><p>每天码搬砖中~~</p>
<p>突然有一天想去看看自己网站 欣赏一下自己作品 </p>
<p>打开 咦这是为啥 显示证书不可用了</p>
<p>因我网站部署在github和coding上</p>
<p>我是国内访问所以去coding 看了一下 好吧<del>~ 过期了 coding域名证书为3个月</del>（内心飘过1万个 ***）</p>
<h1 id="问题以及解决方案"><a href="#问题以及解决方案" class="headerlink" title="问题以及解决方案"></a>问题以及解决方案</h1><p>找到问题后 点击重新申请 显示的以下截图<br><a href="http://img.t-dou.net/hexo/coding_err.jpg" target="_blank" rel="noopener">!</a><br>仔细检查后发现还不行 google 一番后+(邮件联系coding技术支持)发现了原理</p>
<p>因第一次部署 dns还未存在缓存 所以coding默认认为他那里唯一解析直接同意证书申请了</p>
<p>但第二次因阿里云 境外解析为github  默认解析为coding</p>
<p>所以他获取证书时候不知道哪个是主哪个为辅 所以需要临时把境外解析暂停解析<br><a href="http://img.t-dou.net/hexo/ali_config.jpg" target="_blank" rel="noopener">!</a></p>
<p>百度大概需要5分钟(实测 2 3s把 ) 暂停后重新申请即可~~</p>
<p><a href="http://img.t-dou.net/hexo/coding_ok.jpg" target="_blank" rel="noopener">!</a></p>
<hr>
<h2 id="华丽的分割线"><a href="#华丽的分割线" class="headerlink" title="华丽的分割线"></a>华丽的分割线</h2><p>继续装逼中<del>~</del></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>域名证书</tag>
        <tag>Coding</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 开源框架推荐 | Framework</title>
    <url>/cn/u3d-framework.html</url>
    <content><![CDATA[<h1 id="Ellan-Jiang-Game-Framework"><a href="#Ellan-Jiang-Game-Framework" class="headerlink" title="Ellan Jiang @Game Framework"></a>Ellan Jiang @Game Framework</h1><ul>
<li><p>首页: <a href="http://gameframework.cn" target="_blank" rel="noopener">http://gameframework.cn</a></p>
</li>
<li><p>github: (1.5K Star)<a href="https://github.com/EllanJiang/GameFramework" target="_blank" rel="noopener">GameFramework</a> </p>
</li>
<li><p>github: <a href="https://github.com/EllanJiang/UnityGameFramework" target="_blank" rel="noopener">https://github.com/EllanJiang/UnityGameFramework</a></p>
</li>
<li><p>简介</p>
<ul>
<li>Game Framework 是一个基于 Unity 引擎的游戏框架，主要对游戏开发过程中常用模块进行了封装，很大程度地规范开发过程、加快开发速度并保证产品质量。</li>
<li>包含18 个内置模块<ul>
<li>全局配置 (Config)  </li>
<li>数据结点 (Data Node) </li>
<li>数据表 (Data Table) </li>
<li>调试器 (Debugger) </li>
<li>下载 (Download) </li>
<li>实体 (Entity) </li>
<li>事件 (Event)  </li>
<li>有限状态机 (FSM)  </li>
<li>本地化 (Localization) </li>
<li>网络 (Network) </li>
<li>对象池 (Object Pool) </li>
<li>流程 (Procedure) </li>
<li>资源 (Resource) </li>
<li>场景 (Scene) </li>
<li>配置 (Setting) </li>
<li>声音 (Sound) </li>
<li>界面 (UI) </li>
<li>Web 请求 (Web Request)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="熊猫-ET"><a href="#熊猫-ET" class="headerlink" title="熊猫 @ET"></a>熊猫 @ET</h1><ul>
<li><p>github: (2.8k Star)<a href="https://github.com/egametang/ET" target="_blank" rel="noopener">ET</a></p>
</li>
<li><p><a href="https://bbs.honorworkroom.com/forum.php" target="_blank" rel="noopener">论坛</a></p>
</li>
<li><p>简介</p>
<ul>
<li>ET是一个开源的游戏客户端（基于unity3d）服务端双端框架，服务端是使用C# .net core开发的分布式游戏服务端，其特点是开发效率高，性能强，双端共享逻辑代码，客户端服务端热更机制完善，同时支持可靠udp tcp websocket协议，支持服务端3D recast寻路等等</li>
</ul>
</li>
</ul>
<h1 id="Catlib"><a href="#Catlib" class="headerlink" title="Catlib"></a>Catlib</h1><ul>
<li><p>首页:</p>
<ul>
<li>英文: <a href="https://catlib.io" target="_blank" rel="noopener">https://catlib.io</a></li>
<li>中文: <a href="https://cn.catlib.io" target="_blank" rel="noopener">https://cn.catlib.io</a></li>
</ul>
</li>
<li><p>github: <a href="https://github.com/CatLib/CatLib" target="_blank" rel="noopener">Catlib</a></p>
</li>
<li><p>github: <a href="https://github.com/CatLib/Core" target="_blank" rel="noopener">Core</a></p>
</li>
<li><p>简介</p>
<ul>
<li>CatLib 是一套渐进式的服务提供者框架。框架为客户端提供多个实现，并把他们从多个实现中解耦出来。服务提供者的改变对它们的客户端是透明的，这样提供了更好的可扩展性。她不仅易于上手，还便于与第三方库或既有项目整合。</li>
<li>CatLib Core 是最小可用框架。仅提供最基础的功能，是其他框架开发者作为基础的理想选择。</li>
<li>CatLib For Unity 在Framework的基础上增加了对Unity的专有组件支持（要求Unity 2017+）。</li>
</ul>
</li>
</ul>
<blockquote>
<p>完整的文档体系 优美的代码解决方案 建议一看</p>
</blockquote>
<h1 id="凉鞋-QFramework"><a href="#凉鞋-QFramework" class="headerlink" title="凉鞋 @QFramework"></a>凉鞋 @QFramework</h1><ul>
<li><p>github: (1.3k Star)<a href="https://github.com/liangxiegame/QFramework" target="_blank" rel="noopener">QFramework</a></p>
</li>
<li><p>简介</p>
<ul>
<li>QFramework 是一套 渐进式 的 快速开发 框架。目标是作为无框架经验的公司、独立开发者、以及 Unity3D 初学者们的 第一套框架。框架内部积累了多个项目的在各个技术方向的解决方案。学习成本低，接入成本低，重构成本低，二次开发成本低，文档内容丰富(提供使用方式以及原理、开发文档)。</li>
</ul>
</li>
</ul>
<h1 id="高凯-MyUnityFrameWork"><a href="#高凯-MyUnityFrameWork" class="headerlink" title="高凯 @MyUnityFrameWork"></a>高凯 @MyUnityFrameWork</h1><ul>
<li><p>github: <a href="https://github.com/GaoKaiHaHa/MyUnityFrameWork" target="_blank" rel="noopener">MyUnityFrameWork</a></p>
</li>
<li><p>简介</p>
<ul>
<li>Unity框架，组件可插拔，可视化编辑，代码自动生成。<br>　　- 包含资源加载，配置加载，数据加载，UI管理，音频管理,日志管理，动画系统，特效系统等，以及对应编辑器工具<br>　　- 支持Android、Ios、PC、WEBGL<br>　　- 项目中的Script/Core目录就是完整框架<br>　　- <a href="https://github.com/GaoKaiHaHa/MyUnityFrameWork/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">中文维基</a><br>　　- <a href="https://github.com/GaoKaiHaHa/MyUnityFrameWork/wiki" target="_blank" rel="noopener">English Wiki</a></li>
</ul>
</li>
</ul>
<hr>
<p>如有更多优秀框架 欢迎您的推荐 , 下方评论或发生至我的邮箱链接: <a href="mailto:kevin@kylin.app" target="_blank" rel="noopener">kevin@kylin.app</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之统计 百度&amp;Google&amp;FlagCounter 篇</title>
    <url>/cn/1622847258.html</url>
    <content><![CDATA[<h1 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a><a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a></h1><ol>
<li>登录 网站 <a href="https://tongji.baidu.com/" target="_blank" rel="noopener">https://tongji.baidu.com/</a> 并注册账号</li>
</ol>
<ol start="2">
<li>下拉 页面中间部分 选择【网站统计】</li>
</ol>
<p><img src="http://img.t-dou.net/tongji/baidu_01.png" alt="images"></p>
<ol start="3">
<li>如登录正常应该会跳转 <a href="https://tongji.baidu.com/web/xxx/homepage/index" target="_blank" rel="noopener">https://tongji.baidu.com/web/xxx/homepage/index</a> 页面</li>
</ol>
<ol start="4">
<li>选择 【设置】 添加站点</li>
</ol>
<p><img src="http://img.t-dou.net/tongji/baidu_02.png" alt="images"></p>
<p>注意 网站域名是指单独域名 站点首页是完整的首页</p>
<p>例如:域名 blog.0x96m.com,  站点首页:blog.0x96m.com 或 blog.0x96m.com/index.html </p>
<p><img src="http://img.t-dou.net/tongji/baidu_error.png" alt="images"></p>
<p><img src="http://img.t-dou.net/tongji/baidu_error_fix.png" alt="images"></p>
<ol start="5">
<li>添加成功后 获取代码 并添加到 config.yml文件中 baidutongji</li>
</ol>
<p><img src="http://img.t-dou.net/tongji/baidu_get_code.png" alt="images"></p>
<h1 id="敬请期待-Google-Analytics"><a href="#敬请期待-Google-Analytics" class="headerlink" title="[敬请期待] Google Analytics"></a>[敬请期待] <a href="https://google.com/analytics/" target="_blank" rel="noopener">Google Analytics</a></h1><h1 id="敬请期待-访客统计FlagCounter"><a href="#敬请期待-访客统计FlagCounter" class="headerlink" title="[敬请期待] 访客统计FlagCounter"></a>[敬请期待] <a href="http://www.flagcounter.com/" target="_blank" rel="noopener">访客统计FlagCounter</a></h1><ul>
<li>参考: <ul>
<li><a href="https://blog.csdn.net/kl28978113/article/details/79500217" target="_blank" rel="noopener">csdn 使用 访客统计FlagCounter</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>百度统计</tag>
        <tag>Google-Analytics</tag>
        <tag>FlagCounter</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Developer</title>
    <url>/cn/1217436667.html</url>
    <content><![CDATA[<ul>
<li>3D图形学、渲染<ul>
<li>渲染管道流程</li>
<li>3D渲染优化</li>
<li>延迟渲染</li>
<li>Shader编程。</li>
</ul>
</li>
<li>数学、数据结构<ul>
<li>二维矩阵</li>
<li>三维矩阵相乘</li>
<li>转置</li>
<li>向量点乘和叉乘方法和意义</li>
<li>四元数、欧拉数</li>
<li>二叉树</li>
<li>堆栈</li>
<li>线性表</li>
<li>链表</li>
</ul>
</li>
<li>unity3d<ul>
<li>熟悉NGUI（原理机制）</li>
<li>物理引擎</li>
<li>DrawCall优化</li>
<li>AI、自动寻路</li>
<li>做unity3d遇到的坑（unity吭特多，只有亲手做过才知道）</li>
<li>协同程序</li>
<li>动画系统</li>
<li>光照烘培</li>
<li>Trigger 异步加载（AssetBundle.LoadAsync） </li>
</ul>
</li>
</ul>
<ul>
<li><p>u3d</p>
<ul>
<li>网络</li>
<li>导航</li>
<li>特效、粒子系统、拖尾渲染器、线渲染器、镜头光晕、光晕、投影器</li>
<li>物理、刚体、角色控制器、碰撞器、布料、关节、恒力</li>
<li>音频</li>
<li>渲染、摄像机、天空盒、耀斑层、GUI层、灯管、遮挡剔除、LOD、GUI纹理、GUI文本</li>
<li>动画</li>
<li>网络视图</li>
<li>锋利区域</li>
</ul>
</li>
<li><p>u3d数据交互</p>
<ul>
<li>Unity kinect 体感游戏</li>
<li>PlayerPrefs</li>
<li>Mysql等</li>
<li>Txt、Ini、excle、php、xml</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板Mysql无法启动解决方案</title>
    <url>/cn/314575654.html</url>
    <content><![CDATA[<p>问题描述:</p>
<ol>
<li>在宝塔界面Mysql显示状态为关闭, 尝试启动后显示启动成功但是状态未改变</li>
<li>远程连接服务器执行 /etc/init.d/mysql status 查看状态 为正常运行</li>
<li></li>
</ol>
<ol>
<li>3306 端口是否在宝塔面板-安全 放行</li>
<li>云服务器提供商 安全组 入口向3306端口 开放</li>
</ol>
]]></content>
      <categories>
        <category>宝塔面板</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之 hexo _config.yml 详解</title>
    <url>/cn/hexo_config.html</url>
    <content><![CDATA[<p>_config.yml</p>
<ul>
<li><p>分类名映射</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">category_map:  </span><br><span class="line">生活: life</span><br><span class="line">其他: other</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签名映射</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tag_map:</span><br><span class="line">生活: life</span><br><span class="line">其他: other</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.cnblogs.com/liziczh/p/9318665.html" target="_blank" rel="noopener"></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>CC许可协议</title>
    <url>/cn/cc4_0.html</url>
    <content><![CDATA[<p>协议内容</p>
<p>CC许可协议（知识共享许可协议）是博客中最常见的许可协议。协议中主要规定了以下四种权利：</p>
<ul>
<li>署名(BY)：转载此作品时要附上原作者名称等信息。</li>
<li>非商业使用(NC)：这个作品不能被用作商业目的。</li>
<li>禁止演绎(ND)：转载时不能修改原内容。</li>
<li>相同方式共享(SA)：如果转载时修改了原内容那必须以相同的CC许可协议发布修改后的内容。</li>
</ul>
<p>四种权利可以相互组合形成最终协议，但由于一些原因（比如ND与SA协议互斥），目前基本上只有以下六种组合协议：</p>
<ul>
<li>知识共享-署名(CC-BY)</li>
<li>知识共享-署名-相同方式共享(CC-BY-SA）</li>
<li>知识共享-署名-非商业性(CC-BY-NC)</li>
<li>知识共享-署名-禁止演绎(CC-BY-ND)</li>
<li>知识共享-署名-非商业性-禁止演绎(CC-BY-NC-ND)</li>
<li>知识共享-署名-非商业性-相同方式共享(CC-BY-NC-SA)</li>
</ul>
<p><strong><em>参考链接</em></strong></p>
<ul>
<li><a href="https://blog.csdn.net/chroming/article/details/77104869" target="_blank" rel="noopener">https://blog.csdn.net/chroming/article/details/77104869</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之 Url优化篇 | hexo permalink abbrlink</title>
    <url>/cn/hexo_seo_url.html</url>
    <content><![CDATA[<ul>
<li>文章URL优化策略（一）：自定义id属性</li>
</ul>
<p>1.为每篇文章Front-matter添加id属性，作为文章URL，确保id属性的值满足以上条件。</p>
<p>2.编辑站点配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title.html  # 默认永久链接冗长，title中存在中文字符。</span><br><span class="line">permalink: :id.html # 尽量短，层次少，全小写，中划线连字，具有描述性，包含关键词</span><br></pre></td></tr></table></figure>

<ul>
<li>文章URL优化策略（二）：abbrlink链接唯一化</li>
</ul>
<p>1.安装abbrlink插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>2.编辑站点配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: :abbrlink.html   # 生成唯一链接</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: dec    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>标签&amp;分类URL优化</p>
<p>我们在对文章分类或添加标签时，难免会用到中文或其他字符，而我们又在尽量避免中文字符出现在URL中，所以我们需要对中文分类&amp;标签进行映射操作。</p>
<p><strong><em>参考链接</em></strong></p>
<ul>
<li><a href="https://blog.csdn.net/yanzi1225627/article/details/77761488" target="_blank" rel="noopener">https://blog.csdn.net/yanzi1225627/article/details/77761488</a></li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>SEO</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>你会自我介绍吗 | 如何做好自我介绍？</title>
    <url>/cn/1109781078.html</url>
    <content><![CDATA[<p>问题: 如何做好自我介绍 ？</p>
<p>不管在什么场合做自我介绍时间长与短,都应该分为4个部分</p>
<p>第一 我是谁我从哪里来</p>
<p>第二 我因为什么机缘出现在这个场合</p>
<p>第三 我能给大家带来什么价值</p>
<p>第四 我希望能够得到大家什么的支持</p>
<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://tdou.cc/cn/egoInfo/" target="_blank" rel="noopener">https://tdou.cc/cn/egoInfo/</a></p>
]]></content>
      <categories>
        <category>职场</category>
      </categories>
  </entry>
  <entry>
    <title>Unity 性能优化 | 贴图优化、声音优化</title>
    <url>/cn/u3d-youhua.html</url>
    <content><![CDATA[<h2 id="图片相关优化"><a href="#图片相关优化" class="headerlink" title="图片相关优化"></a>图片相关优化</h2><ul>
<li>压缩格式优化 <a href="https://www.jianshu.com/p/f7c3741f22af" target="_blank" rel="noopener">简书</a><ul>
<li>高清晰无压缩 &gt; RGBA32 缺点 内存占用大, 显示运行内存</li>
<li>中清晰中压缩 &gt; RGBA16+Dithering(TexturePacker)内使用FloydSteinberg算法处理<ul>
<li>Dithering抖动对拉伸放大是不友好的</li>
<li>RGB16针对不带透明通道非2次幂图片, 但是效果略逊于RGB32。</li>
</ul>
</li>
<li>低清晰高压缩 &gt; ETC1+Alpha/PVRTC4<ul>
<li>ETC1不带透明通道, 需要外挂一个携带Alpha图片</li>
<li>使用Shader支持 在Shader 中吧RGB 和 A 合并 RGBA</li>
</ul>
</li>
<li>PVRTC4<ul>
<li>必须是2次幂</li>
</ul>
</li>
<li>[Android]<ul>
<li>ETC1, 不支持dxt </li>
</ul>
</li>
<li>[Iphone/Ipand]<ul>
<li>PVRTC4 压缩默认</li>
<li>RGBA16 清晰度高但是渐变不合适</li>
<li>RGBA32 高保真</li>
<li>16it/尺寸减半 压缩 UI Icon </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="声音相关优化"><a href="#声音相关优化" class="headerlink" title="声音相关优化"></a>声音相关优化</h2><p>1.取消Preload Audio Data（预加载音频数据）选项</p>
<ol start="2">
<li>把Override for Android选项勾上，并且设置Load Type为Streaming。<blockquote>
<p>注：Load Type=Streaming    音频剪辑将放入缓存区中，并且从缓存区中播放，一旦播放完后，便被卸载掉</p>
</blockquote>
</li>
</ol>
<p>推荐将Load Type设置为Decompress on Load（在加载时解压）会运行的更流畅（并不是使用于任何的音频，只是使用于频繁使用的音频）</p>
<ul>
<li>参考链接:<br>  -<a href="http://mp.weixin.qq.com/s/4BEC9IrrTUn9_Q81_cWt2g" target="_blank" rel="noopener">微信公众号(游戏蛮牛)-Unity性能优化—声音优化</a></li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>Unity图片优化</tag>
        <tag>Unity贴图优化</tag>
        <tag>Unity声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 AIproCon 开发者大会 PPT</title>
    <url>/cn/AIProCon-PPT.html</url>
    <content><![CDATA[<p>官网地址: <a href="http://aiprocon.csdn.net" target="_blank" rel="noopener">http://aiprocon.csdn.net</a></p>
<p>官方PPT链接: <a href="https://download.csdn.net/meeting/meeting_detail/50" target="_blank" rel="noopener">https://download.csdn.net/meeting/meeting_detail/50</a></p>
<p>官方大会现场照片: <a href="https://v.alltuu.com/album/1021732546/?from=appmessage" target="_blank" rel="noopener">https://v.alltuu.com/album/1021732546/?from=appmessage</a></p>
<blockquote>
<p>注意: 如下载 PPT 请尽量从官方下载链接下载,以便官方统计数据提供更好的支持,谢谢。</p>
</blockquote>
<p>百度网盘资料来源参会者的照片,录像 官方PPT</p>
<ul>
<li>[AIProCon 部分参会者提供照片、录像、PPT]<a href="https://pan.baidu.com/s/1LkEWgMMLQ_1aKBhn7R7FDA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LkEWgMMLQ_1aKBhn7R7FDA</a><br>提取码：b0hu</li>
<li>[AIProCon-PPT] <a href="https://pan.baidu.com/s/16PbWiLY14SDsTfmB2x10mQ" target="_blank" rel="noopener">https://pan.baidu.com/s/16PbWiLY14SDsTfmB2x10mQ</a><br>提取码：jg03</li>
</ul>
<h2 id="知识图谱论坛"><a href="#知识图谱论坛" class="headerlink" title="知识图谱论坛"></a>知识图谱论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/788" target="_blank" rel="noopener">《基于KG的认知智能中台思考及产业化实践》</a><blockquote>
<p>王昊奋 OpenKG联合创始人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/11/9421593ab8da917daa7badb1561c9689.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%AE%BA%E5%9D%9B/%E3%80%8A%E5%9F%BA%E4%BA%8EKG%E7%9A%84%E8%AE%A4%E7%9F%A5%E6%99%BA%E8%83%BD%E4%B8%AD%E5%8F%B0%E6%80%9D%E8%80%83%E5%8F%8A%E4%BA%A7%E4%B8%9A%E5%8C%96%E5%AE%9E%E8%B7%B5%E3%80%8B%E7%8E%8B%E6%98%8A%E5%A5%8B.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/780" target="_blank" rel="noopener">《生活服务领域知识图谱的构建及应用》</a><blockquote>
<p>张富峥 美团点评NLP中心，知识图谱团队负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/09/dfa4095df65751d06c5192722ac37c3f.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E8%AE%BA%E5%9D%9B/%E3%80%8A%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9A%84%E6%9E%84%E5%BB%BA%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E5%BC%A0%E5%AF%8C%E5%B3%A5.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><h2 id="自然语言处理论坛"><a href="#自然语言处理论坛" class="headerlink" title="自然语言处理论坛"></a>自然语言处理论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/763" target="_blank" rel="noopener">《自然语言理解模型XLNet》</a><blockquote>
<p>杨植麟 XLNet作者,睿科伦智能联合创始人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/3f3a27b8b9cd57519c5054a701513ceb.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E8%AE%BA%E5%9D%9B/%E3%80%8A%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9E%8BXLNet%E3%80%8B%E6%9D%A8%E6%A4%8D%E9%BA%9F.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/777" target="_blank" rel="noopener">《Bert和Transformer到底学到了什么？》</a><blockquote>
<p>张俊林 新浪微博机器学习团队AI Lab负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/939c2dfebc7a13a1387cae569171f57c.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E8%AE%BA%E5%9D%9B/%E3%80%8ABert%E5%92%8CTransformer%E5%88%B0%E5%BA%95%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F%E3%80%8B%E5%BC%A0%E4%BF%8A%E6%9E%97.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/776" target="_blank" rel="noopener">《全双工语音对话以及在智能硬件上的应用》</a><blockquote>
<p>周力 微软小冰全球首席架构师及研发总监</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/d4da9e3c49fa3cfbba12d9fd0278cb08.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E8%AE%BA%E5%9D%9B/%E3%80%8A%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%AF%AD%E9%9F%B3%E5%AF%B9%E8%AF%9D%E4%BB%A5%E5%8F%8A%E5%9C%A8%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B%E5%91%A8%E5%8A%9B.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/774" target="_blank" rel="noopener">《自然语言处理在虚拟生命中的工程实践》</a><blockquote>
<p>邵浩 上海瓦歌智能有限公司总经理,狗尾草科技人工智能研究院院长</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/5d46c67f4bfb1e1a5104a38c6000ed1f.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E8%AE%BA%E5%9D%9B/%E3%80%8A%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%9C%A8%E8%99%9A%E6%8B%9F%E7%94%9F%E5%91%BD%E4%B8%AD%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E3%80%8B%E9%82%B5%E6%B5%A9.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><h2 id="AI-DevOps论坛"><a href="#AI-DevOps论坛" class="headerlink" title="AI+DevOps论坛"></a>AI+DevOps论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/772" target="_blank" rel="noopener">《阿里云智能运维的自动化三剑客》</a><blockquote>
<p>滕圣波 阿里巴巴高级技术专家</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/804b702f926a3b5a8dbc528d305d86c7.pdf" target="_blank" rel="noopener">官方PPT下载链接</a> </li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/AI%2BDevOps%E8%AE%BA%E5%9D%9B/%E3%80%8A%E9%98%BF%E9%87%8C%E4%BA%91%E6%99%BA%E8%83%BD%E8%BF%90%E7%BB%B4%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%89%E5%89%91%E5%AE%A2%E3%80%8B%E6%BB%95%E5%9C%A3%E6%B3%A2.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="AI-小程序"><a href="#AI-小程序" class="headerlink" title="AI+小程序"></a>AI+小程序</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/773" target="_blank" rel="noopener">《快应用助力AI，驱动服务落地》</a><blockquote>
<p>杨亮 小米资深软件工程师,快应用框架技术总负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/ef4f28fd975c48bb54881460a4632053.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/AI%2B%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E3%80%8A%E5%BF%AB%E5%BA%94%E7%94%A8%E5%8A%A9%E5%8A%9BAI%EF%BC%8C%E9%A9%B1%E5%8A%A8%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0%E3%80%8B%E6%9D%A8%E4%BA%AE.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="机器学习论坛"><a href="#机器学习论坛" class="headerlink" title="机器学习论坛"></a>机器学习论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/789" target="_blank" rel="noopener">《如何构建面向大型制造业的一站式AI工作平台》</a><blockquote>
<p>任如意、廖国龙 任如意，上汽集团云计算中心AI应用部门技术负责人；廖国龙，ThoughtWorks AI系统架构师</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/11/05389425194580fea10dd444f290b490.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8A%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E9%9D%A2%E5%90%91%E5%A4%A7%E5%9E%8B%E5%88%B6%E9%80%A0%E4%B8%9A%E7%9A%84%E4%B8%80%E7%AB%99%E5%BC%8FAI%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%8F%B0%E3%80%8B%E4%BB%BB%E5%A6%82%E6%84%8F%26%E5%BB%96%E5%9B%BD%E9%BE%99.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/785" target="_blank" rel="noopener">《第三代AI思考与实践》</a><blockquote>
<p>RealAI（瑞莱智慧）CEO</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/10/758d3a697eb2a658dc2ea5d5cfda01a7.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8A%E7%AC%AC%E4%B8%89%E4%BB%A3AI%E6%80%9D%E8%80%83%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8BRealAI.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/784" target="_blank" rel="noopener">《滴滴机器学习平台k8s落地与实践》</a><blockquote>
<p>唐博 滴滴出行资深软件工程师</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/10/758d3a697eb2a658dc2ea5d5cfda01a7.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8A%E6%BB%B4%E6%BB%B4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0k8s%E8%90%BD%E5%9C%B0%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%E5%94%90%E5%8D%9A.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="《3D机器人视觉在工业自动化和仓储物流领域的应用》">《3D机器人视觉在工业自动化和仓储物流领域的应用》</a><blockquote>
<p>王灿 杭州灵西机器人首席科学家</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/10/461b095364c3bc0c64552906fb8c9210.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8A3D%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%A7%86%E8%A7%89%E5%9C%A8%E5%B7%A5%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%92%8C%E4%BB%93%E5%82%A8%E7%89%A9%E6%B5%81%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B%E7%8E%8B%E7%81%BF.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/775" target="_blank" rel="noopener">《Graph Embedding及其在知乎的实践》</a><blockquote>
<p>孙付伟 知乎算法团队负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/d6c7ac725f82c469ff92a08cb8559fc8.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8AGraph%20Embedding%E5%8F%8A%E5%85%B6%E5%9C%A8%E7%9F%A5%E4%B9%8E%E7%9A%84%E5%AE%9E%E8%B7%B5%E3%80%8B%E5%AD%99%E4%BB%98%E4%BC%9F.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/770" target="_blank" rel="noopener">《快速构建高性能AI应用——AI特征数据库技术实践》</a><blockquote>
<p>陈迪豪 第四范式资深AI架构师</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/58afe9d817183183b7cec3f26644246c.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B/%E3%80%8A%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDAI%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94AI%E7%89%B9%E5%BE%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5%E3%80%8B%E9%99%88%E8%BF%AA%E8%B1%AA.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><h2 id="计算机视觉论坛"><a href="#计算机视觉论坛" class="headerlink" title="计算机视觉论坛"></a>计算机视觉论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/779" target="_blank" rel="noopener">《互联网视频基础技术探索及其应用》</a><blockquote>
<p>文石磊 百度视觉技术部主任架构师，视频基础技术团队技术负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/09/5e2be7b516218a4f1e6a0aaf9917c8a5.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E8%AE%BA%E5%9D%9B/%E3%80%8A%E4%BA%92%E8%81%94%E7%BD%91%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E3%80%8B%E6%96%87%E7%9F%B3%E7%A3%8A.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/771" target="_blank" rel="noopener">《高效轻量级深度模型的研究与实践》</a><blockquote>
<p>张祥雨 旷视研究院主任研究员,基础模型组负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/bffaacc1549fd44216476df6b2939612.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E8%AE%BA%E5%9D%9B/%E3%80%8A%E9%AB%98%E6%95%88%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%B7%B1%E5%BA%A6%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%E5%BC%A0%E7%A5%A5%E9%9B%A8.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/769" target="_blank" rel="noopener">《端上视觉技术的极致效率及其短视频应用实践》</a><blockquote>
<p>王华彦 快手硅谷实验室负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/f19a4a62b3d45398125e3407d36edaba.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E8%AE%BA%E5%9D%9B/%E3%80%8A%E7%AB%AF%E4%B8%8A%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E7%9A%84%E6%9E%81%E8%87%B4%E6%95%88%E7%8E%87%E5%8F%8A%E5%85%B6%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E3%80%8B%E7%8E%8B%E5%8D%8E%E5%BD%A6.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><h2 id="深度学习实训营"><a href="#深度学习实训营" class="headerlink" title="深度学习实训营"></a>深度学习实训营</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/768" target="_blank" rel="noopener">李沐「​深度学习实训营」课件（part 1）</a><blockquote>
<p>李沐 亚马逊首席科学家</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/e14968f076132d58e7e8f5f7ac621aa2.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%AE%AD%E8%90%A5/%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%AE%AD%E8%90%A5(part1)%E3%80%8B%E6%9D%8E%E6%B2%90.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="推荐系统论坛"><a href="#推荐系统论坛" class="headerlink" title="推荐系统论坛"></a>推荐系统论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/766" target="_blank" rel="noopener">《电商中的推荐系统》</a><blockquote>
<p>殷大伟 京东集团高级总监</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/8c13e3e90df235d00b14868cec5a4d63.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E8%AE%BA%E5%9D%9B/%E3%80%8A%E7%94%B5%E5%95%86%E4%B8%AD%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E3%80%8B%E6%AE%B7%E5%A4%A7%E4%BC%9F.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="AI开源技术论坛"><a href="#AI开源技术论坛" class="headerlink" title="AI开源技术论坛"></a>AI开源技术论坛</h2><ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/11/b1260c915bc6cf89eec843d8d3664059.pdf" target="_blank" rel="noopener">《Euler：超大规模图深度学习开源框架》</a><blockquote>
<p>林伟 阿里妈妈搜索广告排序和机制算法负责人<br>  -<a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/11/b1260c915bc6cf89eec843d8d3664059.pdf" target="_blank" rel="noopener">官方PPT下载链接</a><br>  -<a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/AI%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8AEuler%EF%BC%9A%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E3%80%8B%E6%9E%97%E4%BC%9F.pdf" target="_blank" rel="noopener">Github-PPT</a></p>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/786" target="_blank" rel="noopener">《使用 DGL 训练大规模图神经网络》</a><blockquote>
<p>马超 亚马逊 AWS AI 应用科学家<br>  -<a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/10/3b423c612961d465df35d54bd7a45aed.pdf" target="_blank" rel="noopener">官方PPT下载链接</a><br>  -<a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/AI%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8A%E4%BD%BF%E7%94%A8%20DGL%20%E8%AE%AD%E7%BB%83%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%8B%E9%A9%AC%E8%B6%85.pdf" target="_blank" rel="noopener">Github-PPT</a></p>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/767" target="_blank" rel="noopener">《基于MACE深度学习框架的落地实践》</a><blockquote>
<p>何亮亮 小米深度学习框架负责人</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/2616c992205b4ea30a6a442a9bd8a5ae.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/AI%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8A%E5%9F%BA%E4%BA%8EMACE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5%E3%80%8B%E4%BD%95%E4%BA%AE%E4%BA%AE.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><h2 id="5G驱动AIoT技术论坛"><a href="#5G驱动AIoT技术论坛" class="headerlink" title="5G驱动AIoT技术论坛"></a>5G驱动AIoT技术论坛</h2><ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/782" target="_blank" rel="noopener">《5G时代的爱（AI）如何在物联中轰轰烈烈》</a><blockquote>
<p>张朝辉 华为IoT标准产业与创新总监</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/10/2bc2e35bd2bd434e0b4a4ac4a812ab0a.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/5G%E9%A9%B1%E5%8A%A8AIoT%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8A5G%E6%97%B6%E4%BB%A3%E7%9A%84%E7%88%B1%EF%BC%88AI%EF%BC%89%E5%A6%82%E4%BD%95%E5%9C%A8%E7%89%A9%E8%81%94%E4%B8%AD%E8%BD%B0%E8%BD%B0%E7%83%88%E7%83%88%E3%80%8B%E5%BC%A0%E6%9C%9D%E8%BE%89.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/781" target="_blank" rel="noopener">《5G 驱动 AIoT 多模态智能技术与应用》</a><blockquote>
<p>梁家恩 云知声董事长、CTO</p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/09/5bc98d5830438b106767449117dfc804.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/5G%E9%A9%B1%E5%8A%A8AIoT%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8A5G%20%E9%A9%B1%E5%8A%A8%20AIoT%20%E5%A4%9A%E6%A8%A1%E6%80%81%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E6%A2%81%E5%AE%B6%E6%81%A9.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
</p><p>

<ul>
<li><a href="https://download.csdn.net/meeting/speech_preview/763" target="_blank" rel="noopener">《5G时代的物联网期待重生》</a><blockquote>
<p>孙松林 北京邮电大学教授、博士生导师 </p>
<ul>
<li><a href="https://meet-download.csdn.net/speech/speech_upload_file/2019/09/07/3f3a27b8b9cd57519c5054a701513ceb.pdf" target="_blank" rel="noopener">官方PPT下载链接</a></li>
<li><a href="https://github.com/AIProCon/AIProCon/blob/master/PPT/5G%E9%A9%B1%E5%8A%A8AIoT%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/%E3%80%8A5G%E6%97%B6%E4%BB%A3%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E5%BE%85%E9%87%8D%E7%94%9F%E3%80%8B%E5%AD%99%E6%9D%BE%E6%9E%97.pdf" target="_blank" rel="noopener">Github-PPT</a></li>
</ul>
</blockquote>
</li>
</ul>
<hr>
</p><p>更新记录:</p>
<ul>
<li><p>2019.9.12: [完全同步官网]</p>
<ul>
<li>add 知识图谱论坛/《基于KG的认知智能中台思考及产业化实践》王昊奋.pdf</li>
<li>add 机器学习论坛/《如何构建面向大型制造业的一站式AI工作平台》任如意&amp;廖国龙.pdf</li>
<li>add 机器学习论坛/《第三代AI思考与实践》RealAI.pdf</li>
<li>add 机器学习论坛/《滴滴机器学习平台k8s落地与实践》唐博.pdf</li>
<li>add 机器学习论坛/《3D机器人视觉在工业自动化和仓储物流领域的应用》王灿.pdf</li>
<li>add AI开源技术论坛/《Euler：超大规模图深度学习开源框架》林伟.pdf</li>
<li>add AI开源技术论坛/《使用 DGL 训练大规模图神经网络》马超.pdf</li>
<li>add 5G驱动AIoT技术论坛/《5G时代的爱（AI）如何在物联中轰轰烈烈》张朝辉.pdf</li>
<li>add 5G驱动AIoT技术论坛/《5G 驱动 AIoT 多模态智能技术与应用》梁家恩.pdf</li>
</ul>
</li>
<li><p>2019.9.10: [未完全同步官网]</p>
<ul>
<li>新增 知识图谱论坛 -《生活服务领域知识图谱的构建及应用》张富峥</li>
<li>新增 计算机视觉论坛 -《互联网视频基础技术探索及其应用》文石磊</li>
</ul>
</li>
<li><p>2019.9.9 : 基础的官网ppt</p>
</li>
</ul>
<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://tdou.cc/cn/AIProCon-PPT/" target="_blank" rel="noopener">https://tdou.cc/cn/AIProCon-PPT/</a><br>特殊说明: 如文字内容有错、官方更新PPT、百度网盘链接失效等情况可联系 <a href="mailto:kevin@kylin.app" target="_blank" rel="noopener">kevin@kylin.app</a>修正或 <a href="https://github.com/AIProCon/AIProCon/tree/master/PPT/README.md" target="_blank" rel="noopener">Github</a> 修正 or PR</p>
]]></content>
      <categories>
        <category>AIProCon</category>
      </categories>
  </entry>
  <entry>
    <title>QFramework 总览 | QF使用指南、QF.ResKit</title>
    <url>/cn/qframework.html</url>
    <content><![CDATA[<p><strong>QFramework 内置模块如下:</strong></p>
<ul>
<li>1.Core</li>
<li>2.ResKit</li>
<li>3.UIKit</li>
<li>4.ScriptCollection</li>
<li>5.ShaderLib</li>
<li>6.EditorToolKit</li>
</ul>
<p><strong>下载:</strong></p>
<ul>
<li><p><strong><a href="http://master.liangxiegame.com/qf/intro" target="_blank" rel="noopener">QF.Package 下载</a></strong>: 只包含模块上传下载功能，不想使用 QF 内置模块的童鞋可以下载此包（内部使用了 UniRx 和 JsonDotNet,如果冲突,请删除项目内的)</p>
</li>
<li><p><strong><a href="http://master.liangxiegame.com/qf/intro" target="_blank" rel="noopener">QFramework V0.1.x 下载</a></strong>: 新版本的 QFramework，命名空间风格为 QF，除了命名空间 API 均兼容 旧版本 (如果是从 v0.0.x 升级到此版本，需要手动将原工程的 QFramework/Framework 目录删除)</p>
</li>
<li><p><strong><a href="http://master.liangxiegame.com/qf/intro" target="_blank" rel="noopener">QFramework v0.0.x 下载</a></strong>: 旧版本的 QFramework，命名空间为 QFramework</p>
</li>
</ul>
<p><strong>交流、教程:</strong></p>
<ul>
<li><strong><a href="http://master.liangxiegame.com/qf/community" target="_blank" rel="noopener">文档</a></strong></li>
<li><strong><a href="http://master.liangxiegame.com/qf/community" target="_blank" rel="noopener">社区</a></strong></li>
<li><strong><a href="//shang.qq.com/wpa/qunwpa?idkey=706b8eef0fff3fe4be9ce27c8702ad7d8cc1bceabe3b7c0430ec9559b3a9ce66">加入 QQ 群:623597263</a></strong></li>
<li><strong><a href="https://github.com/liangxiegame/QFramework" target="_blank" rel="noopener">Github</a></strong>  </li>
</ul>
<hr>
<h1 id="QFramework-使用指南-2020-ResKit-系列篇"><a href="#QFramework-使用指南-2020-ResKit-系列篇" class="headerlink" title="QFramework 使用指南 (2020) ResKit 系列篇"></a>QFramework 使用指南 (2020) ResKit 系列篇</h1><ul>
<li><a href="https://tdou.cc/cn/qf_reskit_01.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（1）概述与基本使用</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_02.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（2）模拟模式与非模拟模式</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_03.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（3）异步加载 与 异步队列加载</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_04.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（4）是否需要传入 AssetBundle 名字</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_05.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（5）加载 Sprite 或精灵图集</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_06.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（6）ResLoader 的推荐用法</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_07.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（7）从其他位置加载资源</a></li>
<li><a href="https://tdou.cc/cn/qf_reskit_08.html" target="_blank" rel="noopener">QFramework 使用指南 (2020) - Res Kit（8）小结与补充</a></li>
</ul>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（8）小结与补充</title>
    <url>/cn/qf_reskit_08.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_07.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</center>

<p>在上一篇，我们了解了 从其他目录加载资源 的功能。</p>
<p>在这一片，我们做一个补充和总结。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>补充分为两部分，一部分是代码生成，另一部分是关于自定义扩展资源类型的预告。</p>
<h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>Res Kit 是支持代码生成的，生成按钮的位置如下所示:<br><img src="http://file.liangxiegame.com/7a76c4e3-1baa-4366-9c8f-3335e311e499.png" alt="image.png"> </p>
<p>点击生成代码即可，生成后结果如下。<br><img src="http://file.liangxiegame.com/0ea13581-4960-4bc8-bbf1-b49a03455271.png" alt="image.png"> </p>
<p>生成了 QAssets 代码文件，代码内容如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">QAssetBundle</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Testobj_prefab</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> BundleName = <span class="string">"testobj_prefab"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> TESTOBJ = <span class="string">"testobj"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Testsprite_png</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> BundleName = <span class="string">"testsprite_png"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> TESTSPRITE = <span class="string">"testsprite"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成了代码，那么在写资源加载的代码的时候就会爽的飞起，如下图示:<br><img src="http://file.liangxiegame.com/7b8ae854-aafe-49d8-9318-5f7d1190c8cc.png" alt="image.png"> </p>
<p>图中，给出了资源名字的提示。</p>
<p>这样就不容易出现字符串的拼写错误了。</p>
<h3 id="自定义资源类型"><a href="#自定义资源类型" class="headerlink" title="自定义资源类型"></a>自定义资源类型</h3><p>我们在上一篇了解了 从 Resources 或从网络中加载资源，实际上，只要掌握 Res Kit 的内部原理，就非常容易扩展自己的资源类型，可以定制资源的加载、卸载、加载路径、同步、异步的逻辑，甚至是加载、卸载的生命周期也可以定制。</p>
<p>当然这部分内容需要笔者花很多的经历去写，目前，我们只掌握已有的加载方式即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们花了 7 篇文章，从各个方面了解了 Res Kit 套件。</p>
<p>现在做一个小的总结:</p>
<ul>
<li>Res Kit<ul>
<li>同步加载资源 ResLoader.LoadSync</li>
<li>异步加载资源 ResLoader.Add2Load + LoadAsync</li>
<li>加载 AB 资源:<ul>
<li>ResLoader.LoadSync(assetName)</li>
<li>ResLoader.LoadSync(abName,assetName)</li>
<li>支持异步(LoadAsync)</li>
</ul>
</li>
<li>加载 Resources 资源:<ul>
<li>ResLoader.LoadSync(“resources://“ + assetPath);</li>
<li>支持异步(LoadAsync)   </li>
<li>加载网络图片<ul>
<li>ResLoader.Add2Load(“netimage:” + imageUrl,(succeed,res)=&gt;{});</li>
</ul>
</li>
<li>开发阶段建议使用 模拟模式</li>
<li>真机阶段建议使用 非模拟模式</li>
<li>模拟模式 资源工作流<ul>
<li>标记 AB</li>
<li>代码加载</li>
</ul>
</li>
<li>非模拟模式 资源工作流<ul>
<li>标记 AB（不推荐在非模拟模式下添加资源，建议在开发阶段添加资源）</li>
<li>打 AB包</li>
<li>代码加载</li>
</ul>
</li>
<li>ResMgr.Init 需要在项目启动时调用一次</li>
<li>ResLoader 建议每个需要加载的脚本，都申请一个。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>此篇的内容就这些。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_07.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（7）从其他位置加载资源</title>
    <url>/cn/qf_reskit_07.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_06.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_08.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇，我们简单探讨了 ResLoader 的设计思考。</p>
<p>在这一篇，我们学习如何从其他位置加载资源。</p>
<h2 id="从-Resources-中加载资源"><a href="#从-Resources-中加载资源" class="headerlink" title="从 Resources 中加载资源"></a>从 Resources 中加载资源</h2><p>从 Resources 中加载资源很简单，代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sprite = mResLoader.LoadSprite (<span class="string">"resources://TestSprite"</span>);</span><br><span class="line"><span class="keyword">var</span> spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">spriteRenderer.sprite = sprite;</span><br></pre></td></tr></table></figure>

<p>只需要加上 resources:// 前缀即可。</p>
<h2 id="从网络中加载资源"><a href="#从网络中加载资源" class="headerlink" title="从网络中加载资源"></a>从网络中加载资源</h2><p>加载网络图片也很简单，只需要加上前缀: netimage: 即可，不过，从网络中加载资源是异步加载，所以需要使用异步加载的 API。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imageUrl = <span class="string">"http://file.liangxiegame.com/296b0166-bdea-47d5-ac87-4b55c91df16f.png"</span>;</span><br><span class="line"></span><br><span class="line">mResLoader.Add2Load (<span class="string">"netimage:"</span> + imageUrl,(succeed,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (succeed) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">        <span class="keyword">var</span> texture2D = res.Asset <span class="keyword">as</span> Texture2D;</span><br><span class="line">        <span class="keyword">var</span> sprite = Sprite.Create(texture2D,<span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,texture2D.width,texture2D.height),Vector2.one * <span class="number">0.5f</span>);</span><br><span class="line">        spriteRenderer.sprite = sprite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mResLoader.LoadAsync();</span><br></pre></td></tr></table></figure>

<h2 id="从本地加载资源"><a href="#从本地加载资源" class="headerlink" title="从本地加载资源"></a>从本地加载资源</h2><p>从本地加载资源，实际上是从 Application.persistentDataPath  中加载资源。</p>
<p>使用方式很简单，只需要加上 localimage: 前缀即可。</p>
<p>因为用得比较少，所以这里不做介绍。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇的内容中，加载网络图片和加载 Resources 资源使用得比较多。</p>
<p>尤其是从 Resources 中加载资源，非常适合作为过渡方案：当一些项目一开始用的是 Resources，后来接触了 QF 的 Res Kit，这种情况下，可以先使用 Res Kit 加载 Resources 资源你的方式。</p>
<p>此篇的内容就这些。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_06.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_08.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（6）ResLoader 的推荐用法</title>
    <url>/cn/qf_reskit_06.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_05.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_07.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇，我们了介绍了 AssetBundle 中加载 Sprite 的坑，以及 Res Kit 如何填上了这个坑。</p>
<p>在这一篇，我们简单聊一下，ResLoader 的设计。</p>
<h2 id="ResLoader-推荐用法"><a href="#ResLoader-推荐用法" class="headerlink" title="ResLoader 推荐用法"></a>ResLoader 推荐用法</h2><p>ResLoader 的推荐用法，是一个需要加载的单元申请一个 ResLoader。</p>
<p>代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> QF.Res;</span><br><span class="line"><span class="keyword">using</span> QF.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">QF.Example</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestResKit</span> : <span class="title">MonoBehaviour</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> 每一个需要加载资源的单元（脚本、界面）申请一个 ResLoader</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> ResLoader 本身会记录该脚本加载过的资源</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">		ResLoader mResLoader = ResLoader.Allocate ();</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 释放所有本脚本加载过的资源</span></span><br><span class="line">			<span class="comment">// 释放只是释放资源的引用</span></span><br><span class="line">			<span class="comment">// 当资源的引用数量为 0 时，会进行真正的资源卸载操作</span></span><br><span class="line">			mResLoader.Recycle2Cache();</span><br><span class="line">			mResLoader = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以上代码中，TestResKit 是一个需要加载资源的单元。</p>
<p><strong>这个单元是什么意思呢？</strong></p>
<p>其实很简单，单元可以是 UIPanel （界面），或者任何需要加载资源服务的 MonoBehaviour。</p>
<h2 id="ResLoader-的职责"><a href="#ResLoader-的职责" class="headerlink" title="ResLoader 的职责"></a>ResLoader 的职责</h2><p>ResLoader 的职责字如其意，就是负责加载资源的，即资源加载器。</p>
<p>一个 ResLoader 会记录所有它加载过的资源。</p>
<p>这样它在释放资源的时候只需要根据加载记录，进行释放即可。</p>
<p>ResLoader 与 单元（Test 脚本）的示意图如下:<br><img src="http://file.liangxiegame.com/296b0166-bdea-47d5-ac87-4b55c91df16f.png" alt="image.png"></p>
<p>这里我们要注意，ResLoader 不是进行真正的资源加载操作，而是进行资源的引用获取。</p>
<p>真正的资源加载是在 ResMgr 中完成，这个过程用户是无法感知的到的。</p>
<p>ResLoader 获取资源引用的过程如下:</p>
<ol>
<li>从 ResLoader 的引用记录中查询是否已经获取了引用，如果之前已经在 ResLoader 记录过资源引用则返回资源。否则执行 2.</li>
<li>从 ResMgr 中查询是否已经有资源对象，如果有资源对象，返回资源，并在 ResLoader 中记录引用，同时对资源对象进行引用计数 +1 操作，否则执行 3.</li>
<li>让 ResMgr 进行资源加载，同时创建资源对象，剩下的步骤同 2。</li>
</ol>
<p>大致的访问资源的过程就是如此，不理解的童鞋不要紧，因为对使用上来说不重要。</p>
<p>我们只需要知道，建议每个需要加载的脚本申请一个 ResLoader，是为了更方便地让大家进行资源管理。</p>
<p>不管这个脚本加载过多少个东西，也不管别的脚本加载过多少，只需要各自脚本释放自己的 ResLoader 即可。</p>
<p>因为每个资源对象对集成了引用计数的。</p>
<h2 id="申请-ResLoader-的消耗"><a href="#申请-ResLoader-的消耗" class="headerlink" title="申请 ResLoader 的消耗"></a>申请 ResLoader 的消耗</h2><p>几乎没有消耗，因为 ResLoader 是从对象池中申请的。</p>
<p>此篇的内容就这些。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_05.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_07.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（5）加载 Sprite 或精灵图集</title>
    <url>/cn/qf_reskit_05.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_04.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_06.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇我们简单讨论了 加载资源时是否需要传入 AssetBundle 名字的问题。</p>
<p>在这一篇，我们聊聊 AssetBundle 存在的一个通病，加载精灵的问题。</p>
<h2 id="AssetBundle-中加载精灵"><a href="#AssetBundle-中加载精灵" class="headerlink" title="AssetBundle 中加载精灵"></a>AssetBundle 中加载精灵</h2><p>我们先准备一个图片，如需哦图所示。<br><img src="http://file.liangxiegame.com/d97acd6e-263f-4f8d-99af-1318a32c4f96.png" alt="image.png"></p>
<p>我们把它标记为 AssetBundle，标记后如下图所示:<br><img src="http://file.liangxiegame.com/304d86c5-3a93-43fb-b736-956b77d5e4c1.png" alt="image.png"> </p>
<p>接着，我们在脚本中直接进行加载。</p>
<p>代码如下所示:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sprite = mResLoader.LoadSync&lt;Sprite&gt; (<span class="string">"TestSprite"</span>);</span><br><span class="line"><span class="keyword">var</span> spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">spriteRenderer.sprite = sprite;</span><br></pre></td></tr></table></figure>

<p>大家注意，我们是使用 <code>LoadSync&lt;Sprite&gt;</code>  加载的图片。<br>运行结果为，不显示任何结果，如下所示：</p>
<p><img src="http://file.liangxiegame.com/e0b43706-2117-42aa-87a2-f58d5eeec2e2.png" alt="image.png"> </p>
<p>说明没有加载成功。</p>
<p>为什么呢？ </p>
<p>因为，现在我们是处于 模拟模式 下。</p>
<p>在模拟模式中，加载的是 Assets 目录下的资源，而在 Assets 目录中 TestSprite 图片是 Texture2D 类型。</p>
<p>为了解决这个问题，ResLoader 提供了 LoadSprite 这个 API，我们把代码改成如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sprite = mResLoader.LoadSprite (<span class="string">"TestSprite"</span>);</span><br><span class="line"><span class="keyword">var</span> spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">spriteRenderer.sprite = sprite;</span><br></pre></td></tr></table></figure>

<p>运行的结果如下:<br><img src="http://file.liangxiegame.com/0156a88f-63ce-4dd9-a38c-2f3aabed6862.png" alt="image.png"><br>场景中有了图片。</p>
<p>这样在模拟模式下，加载 Sprite 就加载成功了。</p>
<p>接下来我们看下非模拟模式下。</p>
<h2 id="非模拟模式下"><a href="#非模拟模式下" class="headerlink" title="非模拟模式下"></a>非模拟模式下</h2><p>我们把环境切到非模拟模式，如下图所示:<br><img src="http://file.liangxiegame.com/1603b5c1-0f7b-485e-a8e1-f93f202e1c5a.png" alt="image.png"> </p>
<p>环境切换成功后，我们需打 AB 包，点击上图中的 “打 AB 包” 按钮。<br><img src="http://file.liangxiegame.com/37673692-45af-4e56-ab7f-2e9c7b177ac6.png" alt="image.png"> </p>
<p>打包成功后，看到如下输出，说明打包成功了:<br><img src="http://file.liangxiegame.com/b7d23d65-4f14-4918-b883-e5f9a777e3d6.png" alt="image.png"><br>Success Save AssetDataTable，而下边的错误可以忽略。</p>
<p>之后我们再运行，加载脚本:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sprite = mResLoader.LoadSprite (<span class="string">"TestSprite"</span>);</span><br><span class="line"><span class="keyword">var</span> spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">spriteRenderer.sprite = sprite;</span><br></pre></td></tr></table></figure>

<p>看下结果:<br><img src="http://file.liangxiegame.com/d3f2cd3d-b333-46a2-ad60-2dde9aef2f11.png" alt="image.png"> </p>
<p>结果是没有加载成功。</p>
<p>这是为什么呢？</p>
<p>相信大家在使用 Res Kit 的时候都遇到过这样的问题。</p>
<p>这是因为，如果想从 AssetBundle 中加载 Sprite 类型的资源，需要将图片打图集，否则它是 Texture2D 类型的。</p>
<p>我们先看下 TestSprite 的 Inspector。</p>
<p><img src="http://file.liangxiegame.com/631f5618-d1f1-4f65-bbc2-d9af0e1c0502.png" alt="image.png"> </p>
<p>打图集的方式很简单，只需要在 Packing Tag 栏上起个名字即可。<br><img src="http://file.liangxiegame.com/fa9ddc4b-a1b8-4d9f-b84a-9d25907d1fc2.png" alt="image.png"> </p>
<p>接着再打一次 AB 包。</p>
<p>之后运行场景。</p>
<p>结果如下:<br>  <img src="http://file.liangxiegame.com/5e0c2b6e-74e2-4c1d-b44b-7ea0083a8856.png" alt="image.png"></p>
<p>说明加载成功了。</p>
<p>这样，关于在 AssetBundle 中加载 Sprite 坑就算填上了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>Res Kit 中推荐使用 LoadSprite 加载 Sprite 类型</li>
<li>非模拟模式下：精灵图片必须要输入 Packing Tag（打图集)</li>
</ul>
<p>这是 Unity AssetBundle 的坑，不是 Res Kit 的坑，望周知。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_04.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_06.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（4）是否需要传入 AssetBundle 名字</title>
    <url>/cn/qf_reskit_04.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_03.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_05.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇，我们简单介绍了，Res Kit 的异步加载和异步队列加载。</p>
<p>在这一篇，我们了解下 Res Kit 加载过程中是否需要传入 AssetBundle 名字的问题。</p>
<h2 id="是否需要传入-AssetBundle-名字"><a href="#是否需要传入-AssetBundle-名字" class="headerlink" title="是否需要传入 AssetBundle 名字"></a>是否需要传入 AssetBundle 名字</h2><p>我们先看下，资源的同步加载代码，如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 LoadSync 同步加载资源</span></span><br><span class="line"><span class="comment">// 只需要传入资源名即可，不需要传入 AssetBundle 名。</span></span><br><span class="line">mResLoader.LoadSync&lt;GameObject&gt; (<span class="string">"TestObj"</span>)</span><br><span class="line">  .Instantiate ();</span><br></pre></td></tr></table></figure>

<p>这段代码中，加载了 TestObj 资源，它在 Assets 目录下是这样的：<br><img src="http://file.liangxiegame.com/eaf2df45-6882-4675-b403-18b028edbf96.png" alt="image.png"> </p>
<p>我们在代码中，只传入了资源的名字：TestObj，而没有传入 AB 的名字：testobj_prefab。</p>
<p>在大多数情况下，这样是没问题的。</p>
<p>除了一些特殊情况:</p>
<ul>
<li>比如，资源名字同名。</li>
</ul>
<h2 id="资源名字同名问题"><a href="#资源名字同名问题" class="headerlink" title="资源名字同名问题"></a>资源名字同名问题</h2><p>面对资源名字同名问题，这里有个简单的解决方案，就是在加载的代码中，传入资源包的名字：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 LoadSync 同步加载资源</span></span><br><span class="line"><span class="comment">// 同名情况下，需要传入 AssetBundle 名。</span></span><br><span class="line">mResLoader.LoadSync&lt;GameObject&gt; (<span class="string">"testobj_prefab"</span>,<span class="string">"TestObj"</span>)</span><br><span class="line">  .Instantiate ();</span><br></pre></td></tr></table></figure>

<p>这样就能非常精确地加载某个 AB 包里的 TestObj 资源。</p>
<p>除了这个简单的解决方案，还有一种方式，就是制定一套资源命名规范，从约定上防止资源重名的情况发生。</p>
<h2 id="为什么设计”不用传-AB-包-就能加载资源“这个特性？"><a href="#为什么设计”不用传-AB-包-就能加载资源“这个特性？" class="headerlink" title="为什么设计”不用传 AB 包,就能加载资源“这个特性？"></a>为什么设计”不用传 AB 包,就能加载资源“这个特性？</h2><p>一是简化资源加载的使用。<br>二是考虑到，项目开发过程中，会经常遇到资源目录变动的情况。</p>
<p>而我们一般在组织 AssetBundle 的时候，一个目录的资源就对应一个 AssetBundle，所以如果在开发阶段频繁修改资源的目录，那么对应地就要改大量的资源加载代码了。否则会遇到很多运行时错误。</p>
<p>考虑到在开发阶段资源的目录没有稳定，需要经常变动，所以设计出了不传入 AB 包名的加载方式。</p>
<p>到了真机阶段，基本上目录已经稳定了，这时候如果没遇到重名问题，还是可以继续使用不传入 AB 包名的加载方式，如果遇到重名问题，只需将重名的资源加载的代码，改成传入 AB 包名的方式即可。</p>
<p>总之为什么设计”不用传 AB 包，就能加载资源“这个特性？</p>
<p>答案就是 Res Kit 第一篇文章中所说的：“简化 API 使用，拥抱各个开发阶段”。</p>
<p>此篇的内容就这些。 </p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_03.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_05.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（3）异步加载 与 异步队列加载</title>
    <url>/cn/qf_reskit_03.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_02.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_04.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇我们了解了 Res Kit 的一些背后设计原理，讲解了一些概念，比如：开发阶段、真机阶段等。</p>
<p>在这一篇，我们回到 Res Kit 使用细节上。</p>
<p>在 Res Kit 的第一篇，我们介绍了 Res Kit 的基本使用，代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> QF.Res;</span><br><span class="line"><span class="keyword">using</span> QF.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">QF.Example</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestResKit</span> : <span class="title">MonoBehaviour</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 全局只需初始化一次</span></span><br><span class="line">			ResMgr.Init ();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> 每一个需要加载资源的单元（脚本、界面）申请一个 ResLoader</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> ResLoader 本身会记录该脚本加载过的资源</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">		ResLoader mResLoader = ResLoader.Allocate ();</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 通过 LoadSync 同步加载资源</span></span><br><span class="line">			<span class="comment">// 只需要传入资源名即可，不需要传入 AssetBundle 名。</span></span><br><span class="line">			mResLoader.LoadSync&lt;GameObject&gt; (<span class="string">"TestObj"</span>)</span><br><span class="line">				.Instantiate ();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 释放所有本脚本加载过的资源</span></span><br><span class="line">			<span class="comment">// 释放只是释放资源的引用</span></span><br><span class="line">			<span class="comment">// 当资源的引用数量为 0 时，会进行真正的资源卸载操作</span></span><br><span class="line">			mResLoader.Recycle2Cache();</span><br><span class="line">			mResLoader = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们把目光聚焦到 加载相关的代码，如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 LoadSync 同步加载资源</span></span><br><span class="line"><span class="comment">// 只需要传入资源名即可，不需要传入 AssetBundle 名。</span></span><br><span class="line">mResLoader.LoadSync&lt;GameObject&gt; (<span class="string">"TestObj"</span>)</span><br><span class="line">      .Instantiate ();</span><br></pre></td></tr></table></figure>

<p>代码中，我们通过 mResLoader.LoadSync 加载资源，LoadSync 意思是同步加载。有同步加载对应地，就有异步加载。</p>
<h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><p>异步加载代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加到加载队列</span></span><br><span class="line">mResLoader.Add2Load(<span class="string">"TestObj"</span>,(succeed,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (succeed) </span><br><span class="line">    &#123;</span><br><span class="line">        res.Asset.As&lt;GameObject&gt;()</span><br><span class="line">						.Instantiate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行异步加载</span></span><br><span class="line">mResLoader.LoadAsync();</span><br></pre></td></tr></table></figure>

<p>与 LoadSync 不同的是，异步加载是分两步的，第一步是添加到加载队列，第二步是执行异步加载。</p>
<p>这样做是为了支持同时异步加载多个资源的。</p>
<h2 id="同时异步加载多个资源"><a href="#同时异步加载多个资源" class="headerlink" title="同时异步加载多个资源"></a>同时异步加载多个资源</h2><p>代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个资源</span></span><br><span class="line">mResLoader.Add2Load(<span class="string">"TestObj"</span>,(succeed,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (succeed) </span><br><span class="line">    &#123;</span><br><span class="line">        res.Asset.As&lt;GameObject&gt;()</span><br><span class="line">            .Instantiate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载一个资源,不处理</span></span><br><span class="line">mResLoader.Add2Load(<span class="string">"TestObj1"</span>,(succeed,res)=&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载一个列表中的资源</span></span><br><span class="line">mResLoader.Add2Load(<span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;()&#123; <span class="string">"TestObj2"</span>,<span class="string">"TestObj3"</span>,<span class="string">"TestObj4"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行加载操作</span></span><br><span class="line">mResLoader.LoadAsync(()=&gt;&#123;</span><br><span class="line">  <span class="comment">// 可以监听所有的资源是否加载成功</span></span><br><span class="line">  <span class="string">"资源加载成功"</span>.LogInfo();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>代码比较简单，考虑了多种加载情况。</p>
<p>此篇的内容就这些。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_02.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_04.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（1）概述与基本使用</title>
    <url>/cn/qf_reskit_01.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_02.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇，我们刚刚结束了 脚本生成专题，我们知道 QF 提供了两种脚本生成模式，一种是 ViewController + Bind ，另一种是 UI Kit 模式。</p>
<p>本来打算，介绍完 ViewController + Bind 模式后，再介绍 UI Kit 模式。</p>
<p>但是在学习 UI Kit 之前，我们需要先了解一点 Res Kit。</p>
<h2 id="Res-Kit-简介"><a href="#Res-Kit-简介" class="headerlink" title="Res Kit 简介"></a>Res Kit 简介</h2><p>Res Kit，是 QF 的一大杀器，顾名思义，它是负责资源的。</p>
<p><strong>特性如下:</strong></p>
<ul>
<li>可以使用一个 API 从  dataPath、Resources、StreammingAssetPath、PersistentDataPath、网络等地方加载资源。</li>
<li>基于引用计数，简化资源加载和卸载。</li>
<li>拥抱游戏开发流程中的不同阶段<ul>
<li>开发阶段不用打 AB 直接从 dataPath 加载。</li>
<li>测试阶段支持只需打一次 AB 即可。</li>
</ul>
</li>
<li>可选择生成资源名常量代码，减少拼写错误。</li>
<li>异步加载队列支持</li>
<li>对于 AssetBundle 资源，可以只通过资源名而不是 AssetBundle 名 + 资源名 加载资源，简化 API 使用。</li>
</ul>
<p>废话不多说，直接开始从最基本的使用开始 。</p>
<h2 id="Res-Kit-基本使用"><a href="#Res-Kit-基本使用" class="headerlink" title="Res Kit 基本使用"></a>Res Kit 基本使用</h2><p>我们知道，在一般情况下，有两种方式可以让我们实现动态加载资源：</p>
<ul>
<li>Resources</li>
<li>AssetBundle</li>
</ul>
<p>在 Res Kit 中，推荐使用 AssetBundle 的方式进行加载，因为 Res Kit 所封装的 AssetBundle 方式，比 Resources 的方式更好用。</p>
<p>除了 Res Kit 中的 AsseBundle 方式更易用外，AssetBundle 本身相比 Resources 有更多的优点，比如更小的包体，支持热更等。</p>
<p>废话不多说，我们看下 Res Kit 的基本使用。</p>
<p>Res Kit 在开发阶段，分为两步。</p>
<ul>
<li>标记资源</li>
<li>写代码</li>
</ul>
<p>在开始之前，我们要确保，当前的 Res Kit 环境为模拟模式。</p>
<p>按下快捷键 ctrl + e 或者 ctrl + shift + r ，我们可以看到如下面板:<br><img src="http://file.liangxiegame.com/c4069b5b-3752-4c4c-91e7-8e1f2272dbfc.png" alt="image.png"> </p>
<p>我们要确保上图中的模拟模式为勾选状态。</p>
<p>确保环境之后，我们就可以开始进行资源的标记工作了。</p>
<h3 id="1-资源标记"><a href="#1-资源标记" class="headerlink" title="1. 资源标记"></a>1. 资源标记</h3><p>在 Asset 目录下，只需对需要标记的文件或文件夹右键-&gt;@ResKit- AssetBundle Mark，如下所示：</p>
<p><img src="http://file.liangxiegame.com/164d9bc4-ab17-486f-bcb3-cac86f5ea3d7.png" alt="image.png"> </p>
<p>标记成功后，我们可以看到如下结果：</p>
<ol>
<li>该资源标记的选项为勾选状态<br><img src="http://file.liangxiegame.com/09d198ad-6e77-4311-abb5-d684783052ff.png" alt="image.png"> </li>
<li>该资源的 AssetLabel 中的名字如下<br><img src="http://file.liangxiegame.com/ed48b734-46ca-464a-9f4b-e64d357e985d.png" alt="image.png"> </li>
</ol>
<p>这样就标记成功了。</p>
<p>接下来我们直接写，资源加载的代码即可，代码如下，具体的代码含义，看注释即可。。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> QF.Res;</span><br><span class="line"><span class="keyword">using</span> QF.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">QF.Example</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestResKit</span> : <span class="title">MonoBehaviour</span> </span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">			<span class="comment">// 全局只需初始化一次</span></span><br><span class="line">			ResMgr.Init ();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> 每一个需要加载资源的单元（脚本、界面）申请一个 ResLoader</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> ResLoader 本身会记录该脚本加载过的资源</span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">		<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">		ResLoader mResLoader = ResLoader.Allocate ();</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 通过 LoadSync 同步加载资源</span></span><br><span class="line">			<span class="comment">// 只需要传入资源名即可，不需要传入 AssetBundle 名。</span></span><br><span class="line">			mResLoader.LoadSync&lt;GameObject&gt; (<span class="string">"TestObj"</span>)</span><br><span class="line">				.Instantiate ();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>		&#123;</span><br><span class="line">			<span class="comment">// 释放所有本脚本加载过的资源</span></span><br><span class="line">			<span class="comment">// 释放只是释放资源的引用</span></span><br><span class="line">			<span class="comment">// 当资源的引用数量为 0 时，会进行真正的资源卸载操作</span></span><br><span class="line">			mResLoader.Recycle2Cache();</span><br><span class="line">			mResLoader = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将此脚本挂到任意 GameObject 上，运行后，结果如下:<br><img src="http://file.liangxiegame.com/cd813baf-0655-4a5a-8078-84b670cd102b.png" alt="image.png"> </p>
<p>资源加载成功。</p>
<p>到此，Res Kit 的基本使用就介绍完毕。</p>
<p>从下篇开始，开始逐步介绍 Res Kit 的方方面面。</p>
<p>此篇内容就这些。</p>
<ul>
<li>转载请注明地址：凉鞋的笔记：liangxiegame.com。</li>
<li>任何问题欢迎到 QQ 群：623597263 交流。</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_02.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>QFramework 使用指南 (2020) - Res Kit（2）模拟模式与非模拟模式</title>
    <url>/cn/qf_reskit_02.html</url>
    <content><![CDATA[<center>
<a href="https://tdou.cc/cn/qf_reskit_01.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_03.html" target="_blank" rel="noopener">下一阶段</a>
</center>


<p>在上一篇，介绍了 Res Kit 的基本使用，相信大家已经体会到了 Res Kit 的简便之处了。</p>
<p>在这一篇，我们试着探讨一下 Res Kit 的设计背后原理。</p>
<h2 id="AssetBundle-的不便之处"><a href="#AssetBundle-的不便之处" class="headerlink" title="AssetBundle 的不便之处"></a>AssetBundle 的不便之处</h2><p>在使用 Res Kit 之前，相信大家多多少少接触过 AssetBundle。 有的童鞋可能是在项目中用过 AssetBundle，有的童鞋可能只是简单学习过 AssetBundle。总之，AssetBundle 在不通过 Res Kit 使用之前，总结下来就两个字：麻烦。</p>
<p>AssetBundle 麻烦在哪里呢？</p>
<p>首先 AssetBundle，需要打包才能在运行时加载资源。而打包需要我们写编辑器扩展脚本，在编辑器扩展脚本中还要处理平台和路径相关的逻辑。</p>
<p>在运行时，还需要根据平台和路径去加载对应的 AssetBundle。</p>
<p>这些操作想想就比较头痛。</p>
<p>既然 AssetBundle 这么麻烦，我们为什么还要用 AssetBundle 呢？</p>
<p>因为 AssetBundle 可以给项目带来更好的性能，而且 AssetBundle 支持热更新。</p>
<p>有了这两个优势，AssetBundle 就成了很多项目的必然选择。</p>
<p>而 Res Kit 中，为了解决频繁打包的问题，引入了一个概念：模拟模式（Simulation Mode）。</p>
<h3 id="模拟模式（Simulation-Mode）"><a href="#模拟模式（Simulation-Mode）" class="headerlink" title="模拟模式（Simulation Mode）"></a>模拟模式（Simulation Mode）</h3><p>在上一篇，我们已经接触了模拟模式（Simulation Mode）。</p>
<p><strong>什么是模拟模式？</strong></p>
<p>顾名思义，就是模拟加载 AssetBundle 的模式，这里只是模拟，并没有真正去加载 AssetBundle，而是去加载 Application.dataPath 目录下的资源，也就是 Assets 目录下的资源。</p>
<p><strong>这样做有什么好处呢？</strong></p>
<p>好处就是每当有资源修改的时候，就不用再打 AB 包了，就可以在运行时加载到修改后的资源。</p>
<p>如果是非模拟模式下，每当有资源修改时，就需要再打一次 AB 包，才能加载到修改后的资源。</p>
<p>所以一个模拟模式，解决了频繁打 AB 包的问题，从而在开发阶段提高我们的开发效率。</p>
<p>那么在使用 Res Kit 的时候，模拟模式对应的阶段是开发阶段，那么非模拟模式对应的是什么阶段呢？</p>
<p>答案就是真机阶段。</p>
<h2 id="开发阶段、真机阶段"><a href="#开发阶段、真机阶段" class="headerlink" title="开发阶段、真机阶段"></a>开发阶段、真机阶段</h2><p>开发阶段、真机阶段并不是 Unity 提供的概念，而是笔者在迭代 Res Kit 中提出的两个概念。</p>
<p>这两个概念很容易理解：</p>
<ul>
<li>开发阶段：开发逻辑的阶段，需要编写大量的逻辑，大部分情况下都在 Unity Editor 环境下开发。</li>
<li>真机阶段：需要在真机上运行的阶段，这个阶段主要是做大量的测试或者真正发布了。</li>
</ul>
<p>相信有点规模的项目都会分阶段出来的，比如开发阶段、测试阶段、生产阶段等等，大家理解起来应该不难。</p>
<p>接下来简单分析一下开发阶段、真机阶段的特点。</p>
<p><strong>开发阶段</strong><br>在开发阶段，开发者需要写大量的逻辑，而且资源的目录还没有稳定，一般在开发过程中会有很大的变化。<br>如果每次资源的修改都需要打 AB 包的话，会非常影响开发进度。</p>
<p><strong>真机阶段</strong><br>真机阶段，一般就是一个版本的逻辑都写完了，只需要做一些测试和 debug 工作。在这个阶段，资源目录都稳定了，不需要做很大的调整。</p>
<p>在真机阶段，每次打 App 包之前，只需要 Build 一次 AB 即可。</p>
<p>当然，在 Unity Editor 环境中，可以取消勾选模拟模式，这样在 Unity Editor 环境下可以加载真正的 AssetBundle 包。</p>
<p>在上一篇文章所说的，拥抱各个开发阶段指的就是为开发阶段、和真机阶段做了考虑。</p>
<p>此篇的内容就这些。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>开发阶段：</p>
<ul>
<li>模拟模式</li>
</ul>
</li>
<li><p>真机阶段：</p>
<ul>
<li>每次打 App 包之前，打一次 AB 包。</li>
<li>可以在 Unity Editor 环境下，取消勾选模拟模式，这时在运行时加载的资源则是真正的 AssetBundle 资源</li>
</ul>
</li>
<li><p>转载请注明地址：凉鞋的笔记：liangxiegame.com。</p>
</li>
<li><p>任何问题欢迎到 QQ 群：623597263 交流。</p>
</li>
</ul>
<center>
<a href="https://tdou.cc/cn/qf_reskit_01.html" target="_blank" rel="noopener">上一阶段</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qframework.html" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/qf_reskit_03.html" target="_blank" rel="noopener">下一阶段</a>
</center>
]]></content>
      <categories>
        <category>QFramework</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Framework</tag>
        <tag>QFramework</tag>
        <tag>QFramework.ResKit</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 打开对话框</title>
    <url>/cn/u3d-dialog.html</url>
    <content><![CDATA[<h1 id="编辑模式（Editor）下："><a href="#编辑模式（Editor）下：" class="headerlink" title="编辑模式（Editor）下："></a>编辑模式（Editor）下：</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">string</span> path = EditorUtility.OpenFilePanel(<span class="string">"Load png Textures of Directory"</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">WWW www = <span class="keyword">new</span> WWW(<span class="string">"file:///"</span> + path);</span><br><span class="line">Debug.Log(www.url);</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">gui.texture = www.texture;</span><br></pre></td></tr></table></figure>

<h1 id="非编辑模式"><a href="#非编辑模式" class="headerlink" title="非编辑模式"></a>非编辑模式</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">OpenFileDialog diglog = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">diglog.InitialDirectory = <span class="string">"file://"</span> + UnityEngine.Application.dataPath;  <span class="comment">//定义打开的默认文件夹位置//定义打开的默认文件夹位置</span></span><br><span class="line"><span class="keyword">if</span>(ofd.ShowDialog() == DialogResult.OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// todo: 显示打开文件的窗口</span></span><br><span class="line">    Debug.Log(ofd.FileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意: 以上操作需要添加 System.Windows.Forms.dll,放在Plugins文件夹下，同时需要更改.net 2.0 Subset为.net2.0 </p>
<p>![<a href="https://img.0x96m.com/u3d_diglog/no_editor.jpg]" target="_blank" rel="noopener">https://img.0x96m.com/u3d_diglog/no_editor.jpg]</a></p>
<h1 id="unity3d调用win32打开对话框"><a href="#unity3d调用win32打开对话框" class="headerlink" title="unity3d调用win32打开对话框"></a>unity3d调用win32打开对话框</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DllTest</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto )</span>]  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenFileName</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      structSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> IntPtr   dlgOwner = IntPtr.Zero; </span><br><span class="line">    <span class="keyword">public</span> IntPtr   instance = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> String   filter = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> String   customFilter = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      maxCustFilter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      filterIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String   file = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      maxFile = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String   fileTitle = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      maxFileTitle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String   initialDir = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> String   title = <span class="literal">null</span>;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      flags = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">short</span>    fileOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">short</span>    fileExtension = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String   defExt = <span class="literal">null</span>; </span><br><span class="line">    <span class="keyword">public</span> IntPtr   custData = IntPtr.Zero;  </span><br><span class="line">    <span class="keyword">public</span> IntPtr   hook = IntPtr.Zero;  </span><br><span class="line">    <span class="keyword">public</span> String   templateName = <span class="literal">null</span>; </span><br><span class="line">    <span class="keyword">public</span> IntPtr   reservedPtr = IntPtr.Zero; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      reservedInt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>      flagsEx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DllTest</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"Comdlg32.dll"</span>,SetLastError=true,ThrowOnUnmappableChar=true, CharSet = CharSet.Auto)</span>]          </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">GetOpenFileName</span>(<span class="params">[ In, Out ] OpenFileName ofn </span>)</span>;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">bool</span> <span class="title">GetOpenFileName1</span>(<span class="params">[ In, Out ] OpenFileName ofn </span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetOpenFileName(ofn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">public class Test : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    public GameObject plane;</span><br><span class="line"></span><br><span class="line">    void OnGUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if(GUI.Button(new Rect(0,0,100,35),&quot;OpenDialog&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            OpenFileName ofn = new OpenFileName();</span><br><span class="line"></span><br><span class="line">            ofn.structSize = Marshal.SizeOf(ofn);</span><br><span class="line"></span><br><span class="line">            ofn.filter = &quot;All Files\0*.*\0\0&quot;;</span><br><span class="line"></span><br><span class="line">            ofn.file = new string(new char[256]);</span><br><span class="line"></span><br><span class="line">            ofn.maxFile = ofn.file.Length;</span><br><span class="line"></span><br><span class="line">            ofn.fileTitle = new string(new char[64]);</span><br><span class="line"></span><br><span class="line">            ofn.maxFileTitle = ofn.fileTitle.Length;</span><br><span class="line"></span><br><span class="line">            ofn.initialDir =UnityEngine.Application.dataPath;//默认路径</span><br><span class="line"></span><br><span class="line">            ofn.title = &quot;Open Project&quot;;</span><br><span class="line"></span><br><span class="line">            ofn.defExt = &quot;JPG&quot;;//显示文件的类型</span><br><span class="line">           //注意 一下项目不一定要全选 但是0x00000008项不要缺少</span><br><span class="line">            ofn.flags=0x00080000|0x00001000|0x00000800|0x00000200|0x00000008;//OFN_EXPLORER|OFN_FILEMUSTEXIST|OFN_PATHMUSTEXIST| OFN_ALLOWMULTISELECT|OFN_NOCHANGEDIR</span><br><span class="line"></span><br><span class="line">            if(DllTest.GetOpenFileName( ofn ))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                StartCoroutine(WaitLoad(ofn.file));//加载图片到panle</span><br><span class="line"></span><br><span class="line">                Debug.Log( &quot;Selected file with full path: &#123;0&#125;&quot;+ofn.file );</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IEnumerator WaitLoad(string fileName)</span><br><span class="line">    &#123;</span><br><span class="line">        WWW wwwTexture=new WWW(&quot;file://&quot;+fileName);</span><br><span class="line"></span><br><span class="line">        Debug.Log(wwwTexture.url);</span><br><span class="line"></span><br><span class="line">        yield return wwwTexture;</span><br><span class="line"></span><br><span class="line">        plane.renderer.material.mainTexture=wwwTexture.texture;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![<a href="https://img.0x96m.com/u3d_diglog/u2d2win32-01.jpg]" target="_blank" rel="noopener">https://img.0x96m.com/u3d_diglog/u2d2win32-01.jpg]</a><br>![<a href="https://img.0x96m.com/u3d_diglog/u2d2win32-02.jpg]" target="_blank" rel="noopener">https://img.0x96m.com/u3d_diglog/u2d2win32-02.jpg]</a></p>
<p>参考知识：</p>
<ol>
<li><a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.inattribute%28v=vs.85%29" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.inattribute%28v=vs.85%29</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646839%28v=vs.85%29.aspx" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/library/windows/desktop/ms646839%28v=vs.85%29.aspx</a></li>
<li>C#和win32类型对应</li>
<li><a href="http://blog.csdn.net/wanfang323/article/details/6372995" target="_blank" rel="noopener">http://blog.csdn.net/wanfang323/article/details/6372995</a></li>
<li><a href="https://www.cnblogs.com/U-tansuo/archive/2012/07/10/GetOpenFileName.html" target="_blank" rel="noopener">https://www.cnblogs.com/U-tansuo/archive/2012/07/10/GetOpenFileName.html</a></li>
</ol>
<p>原文地址: <a href="https://www.cnblogs.com/U-tansuo/archive/2012/07/10/GetOpenFileName.html" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity-对话框</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D UI边缘流光特性小技巧</title>
    <url>/cn/3386423127.html</url>
    <content><![CDATA[<p>今天给大家说一个做UI特效的小技巧，先来看看效果吧</p>
<p><img src="http://img.t-dou.net/u3d_ui_liuguang/01.gif" alt="images"></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li>首先找你们UI组要一个需要制作特效的UI<br><img src="http://img.t-dou.net/u3d_ui_liuguang/01.png" alt="images"></li>
</ol>
<ol start="2">
<li>然后在 3dMax 里安装UI尺寸创建一个面片, 之后吧UI当做贴图贴上去<br><img src="http://img.t-dou.net/u3d_ui_liuguang/02.png" alt="images"></li>
</ol>
<ol start="3">
<li><p>切换到顶视图，然后在UI的边框画一条曲线（注意要用Line自己画出来）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/03-1.png" alt="images"><br><img src="http://img.t-dou.net/u3d_ui_liuguang/03-2.png" alt="images"></p>
</li>
<li><p>创建一个面片 在这条曲线上走一个路径动画，要把这条曲线走完（面片的面数不用太高）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/04.png" alt="images"></p>
</li>
<li><p>选中面片转换成不受曲线影响的模型<br><img src="http://img.t-dou.net/u3d_ui_liuguang/05.png" alt="images"></p>
</li>
<li><p>把这个模型四个角的点修整一下<br><img src="http://img.t-dou.net/u3d_ui_liuguang/06.png" alt="images"></p>
</li>
<li><p>把这个模型转换成poly模式 再把断边的点合并<br><img src="http://img.t-dou.net/u3d_ui_liuguang/07.png" alt="images"></p>
</li>
<li><p>删掉模型多余的线<br><img src="http://img.t-dou.net/u3d_ui_liuguang/08.png" alt="images"></p>
</li>
<li><p>再然后选择四条边角线  做一个倒角<br><img src="http://img.t-dou.net/u3d_ui_liuguang/09.png" alt="images"></p>
</li>
<li><p>再添加一个分UV的命令 稍微调整一下UV<br><img src="http://img.t-dou.net/u3d_ui_liuguang/10.png" alt="images"></p>
</li>
<li><p>UV如下图所示（UV分好后导出FBX格式的模型放入你的工程文件里）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/11.png" alt="images"></p>
</li>
<li><p>打开你们的U3D把UI放进去 （大小什么的要问你们的程序要一个GUI）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/12.png" alt="images"></p>
</li>
<li><p>然后选一个比较合适的贴图（这里贴图自己弄，我的GIF效果用的不是这个图，只是为了说明一下）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/13.png" alt="images"></p>
</li>
<li><p>然后把你们的FBX格式模型放到U3D里面，然后把选好的贴图帖上去，再按ctrl+6打开动画面板（应该需要稍微做下调整）<br><img src="http://img.t-dou.net/u3d_ui_liuguang/14.png" alt="images"></p>
</li>
<li><p>接着就是给你的模型材质球上面K针，就是UV动画。<br><img src="http://img.t-dou.net/u3d_ui_liuguang/15.png" alt="images"></p>
</li>
<li><p>再然后就是把你K好的这个动画文件勾上循环<br><img src="http://img.t-dou.net/u3d_ui_liuguang/16.png" alt="images"></p>
</li>
<li><p>接着再复制一个旋转一下角度<br><img src="http://img.t-dou.net/u3d_ui_liuguang/17.png" alt="images"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Unity-特效</tag>
        <tag>Unity-UI</tag>
      </tags>
  </entry>
  <entry>
    <title>闲扯-AIProCon开发者大会-深度学习训练营</title>
    <url>/cn/2743212410.html</url>
    <content><![CDATA[<p>大会主页: <a href="https://aiprocon.csdn.net" target="_blank" rel="noopener">https://aiprocon.csdn.net</a></p>
<p>github 会议 记录仓库: <a href="https://github.com/AIProCon/AIProCon" target="_blank" rel="noopener">https://github.com/AIProCon/AIProCon</a></p>
<p>官方图文直播记录 <a href="https://v.alltuu.com/album/1021732546/?from=groupmessage" target="_blank" rel="noopener">https://v.alltuu.com/album/1021732546/?from=groupmessage</a></p>
<h1 id="2019-09-05-深度学习训练营"><a href="#2019-09-05-深度学习训练营" class="headerlink" title="2019.09.05 深度学习训练营"></a>2019.09.05 深度学习训练营</h1><p>培训ppt/资料 主页: <a href="http://1day-zh.d2l.ai/" target="_blank" rel="noopener">http://1day-zh.d2l.ai/</a></p>
<p>我去参加AI开发者大会-动手学深度学习一天训练营,哈哈 当然请假去的</p>
<p><img src="http://img.t-dou.net/aiprocon/d2l_info.png" alt="日程图"></p>
<p><img src="http://img.t-dou.net/aiprocon/d2_limi.png" alt="李沐老师 亚马逊首席科学家"></p>
<p>训练营记录<br><img src="http://img.t-dou.net/aiprocon/d2l01.png" alt><br><img src="http://img.t-dou.net/aiprocon/d2l02.png" alt><br><img src="http://img.t-dou.net/aiprocon/d2l03.png" alt><br><img src="http://img.t-dou.net/aiprocon/d2l04.png" alt><br><img src="http://img.t-dou.net/aiprocon/d2l05.png" alt><br><img src="http://img.t-dou.net/aiprocon/d2l06.png" alt></p>
<h1 id="晚上-Hackathon"><a href="#晚上-Hackathon" class="headerlink" title="晚上 Hackathon"></a>晚上 Hackathon</h1><p>项目地址: <a href="https://github.com/hetong007/d2l-1day-cv-hackathon" target="_blank" rel="noopener">https://github.com/hetong007/d2l-1day-cv-hackathon</a></p>
<p>兴致勃勃的参加了晚上的互动小圆桌  虽然半途溜了 不过还是吧 demo跑通了<br>我的小队小伙伴持续到结束 晚上即将23:47点散会 有个小伙伴凌晨0.30才到宾馆</p>
<p>哈哈我们小队名称 【Hackathon five rookie】<br><img src="http://img.t-dou.net/aiprocon/hack-xd.png" alt="Hackathon five rookie"></p>
<p>晚上参与图片<br><img src="http://img.t-dou.net/aiprocon/hack01.png" alt="Hackathon"><br><img src="http://img.t-dou.net/aiprocon/hack02.png" alt="Hackathon"></p>
<p><img src="http://img.t-dou.net/aiprocon/hack-all.jpg" alt="坚持到最后的合影"></p>
<p><img src="http://img.t-dou.net/aiprocon/hack-no-1.png" alt="最终胜利的小队合影"><br><img src="http://img.t-dou.net/aiprocon/hack-result.png" alt="Hackathon群友发的识别结果"></p>
<p>图片来自参与时收集,如您感觉侵犯您的肖像权 请Email联系我 <a href="mailto:kevin@kylin.app" target="_blank" rel="noopener">kevin@kylin.app</a> 在收到邮件后24小时内删除</p>
]]></content>
      <categories>
        <category>AIProCon</category>
      </categories>
      <tags>
        <tag>闲扯</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity之Shader系列 01.启蒙</title>
    <url>/cn/shader-01.html</url>
    <content><![CDATA[<h2 id="Shader-学习资料"><a href="#Shader-学习资料" class="headerlink" title="Shader 学习资料"></a>Shader 学习资料</h2><ul>
<li>书籍《Unity Shader 入门精要》</li>
<li>书籍《Unity3D ShaderLab 开发实战详解》</li>
<li>书籍《Unity 着色器和屏幕特效开发秘籍》</li>
<li>书籍《实时渲染》（Reatime Rendering）</li>
<li>书籍《GPU Gem》 系列等 专栏 </li>
<li>视频 蛮牛\Siki\B站 等</li>
</ul>
<h2 id="什么是Shader"><a href="#什么是Shader" class="headerlink" title="什么是Shader ?"></a>什么是Shader ?</h2><p>Shader 哈, 百度百科,各种教程好多说过什么是Shader,但是我理解Shader方式</p>
<p>Shade 英文意思: v.给 … 遮阳/遮挡（光线）；把 … 涂暗(颜色) , 把 … 掩盖/覆盖(密度)</p>
<p>字母意思就是把什么东西涂成什么 就是shader 着色器</p>
<h3 id="详解-吧什么涂暗-覆盖-遮挡"><a href="#详解-吧什么涂暗-覆盖-遮挡" class="headerlink" title="详解 吧什么涂暗/覆盖/遮挡"></a>详解 吧什么涂暗/覆盖/遮挡</h3><p>游戏世界的物体, 有光明就有黑暗, 有光照就有明暗对比 阴影等</p>
<p>而Shader之所以叫Shader就是给物体增加明暗对比,有了明暗对比在游戏世界更加立体,而画面显示更加真实 3D感觉</p>
<p>所以Shader的作用就是给物体添加明暗对比  涂颜色 覆盖密度 遮挡光线</p>
<h3 id="Shader-为什么叫Shader"><a href="#Shader-为什么叫Shader" class="headerlink" title="Shader 为什么叫Shader"></a>Shader 为什么叫Shader</h3><p>以上纯属个人推测+QF小班(凉鞋大佬的文章)</p>
<p>现在的Shader还可以做很多 滤镜 性能优化(减少包大小 减少图片内存) 等等事情</p>
<p>一开始启动Shader也行很简单 仅仅附加明暗对比(光照计算),后来硬件和软件发展, 很多利息渲染(电源CG)算法</p>
<h2 id="Shader-是着色器"><a href="#Shader-是着色器" class="headerlink" title="Shader 是着色器"></a>Shader 是着色器</h2><p>什么是 Shader，中文叫做着色器，也就是给物体上色的意思，也就是说写 Shader 就是给物体上色的艺术。而这个上色不只是简单的色彩填充，而是涵盖了非常多的技巧（几何计算、颜色计算、贴图等）</p>
<p>所以中文的着色器，是一个非常精准的翻译</p>
<p>QF小班@{笑笑} 一个不错的说法: Shader 主要是光线数据作用在不同数据的物体上产生不同效果。</p>
<h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="http://img.t-dou.net/Shader-%E5%90%AF%E8%92%99-map.jpg" alt></p>
<center>
<a href="https://tdou.cc/cn/Shaders/" target="_blank" rel="noopener">回到总览</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="https://tdou.cc/cn/Shaders" target="_blank" rel="noopener">下一阶段[敬请期待]</a>
</center>

<hr>
<p>版权声明：本文为博主原创文章，遵循 <a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://tdou.cc/cn/Shader-01/" target="_blank" rel="noopener">https://tdou.cc/cn/Shader-01/</a><br>附加版权说明: 本文所述部分内容版权归属@{<a href="https://github.com/liangxiegame" target="_blank" rel="noopener">凉鞋大佬</a>}<br>文章引用自: <a href="http://master.liangxiegame.com/master/intro" target="_blank" rel="noopener">QF小班</a> 欢迎大佬一块加入交流学习</p>
]]></content>
      <categories>
        <category>Unity-Shader</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Shader</tag>
        <tag>QF小班</tag>
      </tags>
  </entry>
  <entry>
    <title>C# async、await 详解</title>
    <url>/cn/1654076298.html</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/7fe5ed0f426e" target="_blank" rel="noopener">https://www.jianshu.com/p/7fe5ed0f426e</a></p>
<p><a href="https://www.zhihu.com/question/30601778" target="_blank" rel="noopener">https://www.zhihu.com/question/30601778</a></p>
<p><a href="http://xamclub.com/archives/762" target="_blank" rel="noopener">http://xamclub.com/archives/762</a></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#-async</tag>
        <tag>C#-await</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04 搭建 SVN</title>
    <url>/cn/2339554629.html</url>
    <content><![CDATA[<h1 id="安装svn"><a href="#安装svn" class="headerlink" title="安装svn"></a>安装svn</h1><ul>
<li>配置教程: <a href="https://blog.csdn.net/zengsange/article/details/80618301" target="_blank" rel="noopener">https://blog.csdn.net/zengsange/article/details/80618301</a></li>
<li>其他配置教程[开机启动] <a href="https://www.cnblogs.com/chen-lhx/p/5805716.html" target="_blank" rel="noopener">https://www.cnblogs.com/chen-lhx/p/5805716.html</a></li>
</ul>
<ul>
<li><p>启动服务器</p>
<blockquote>
<p>svnserve -d -r /usr/svn/</p>
</blockquote>
</li>
<li><p>查看运行状态</p>
<blockquote>
<p>ps aux | grep svnserve</p>
</blockquote>
</li>
<li><p>停止</p>
<blockquote>
<p>killall svnserve</p>
</blockquote>
</li>
</ul>
<h1 id="依赖nginx代理转向域名"><a href="#依赖nginx代理转向域名" class="headerlink" title="依赖nginx代理转向域名"></a>依赖nginx代理转向域名</h1><ul>
<li>vi /etc/nginx/conf.d/svn_nginx.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	# 监听 80 端口</span><br><span class="line">	listen 80;</span><br><span class="line">	autoindex on;</span><br><span class="line">	server_name svn.tdou.cc;</span><br><span class="line">	access_log /var/log/nginx/svn_access.log;</span><br><span class="line">	error_log /var/log/nginx/svn_error.log;</span><br><span class="line">	index index.html index.htm index.jsp index.php;</span><br><span class="line">	if ( $query_string ~* &quot;.*[\;&apos;\&lt;\&gt;].*&quot; )&#123;</span><br><span class="line">		return 404;</span><br><span class="line">	&#125;</span><br><span class="line">	location / &#123;</span><br><span class="line">		# 反向代理到 8080 端口</span><br><span class="line">		proxy_pass http://127.0.0.1:3690;</span><br><span class="line">		add_header Access-Control-Allow-Origin *;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>验证ngxin nginx -t </p>
</li>
<li><p>重启nginx /etc/init.d/nginx restart </p>
</li>
<li><p>验证OK 重启失败</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[....] Starting nginx (via systemctl): nginx.serviceJob for nginx.service failed because the control process exited with error code.</span><br><span class="line">See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">failed!</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.chenxm.cc/article/40.html" target="_blank" rel="noopener">http://www.chenxm.cc/article/40.html</a></li>
<li><a href="https://www.digitalocean.com/community/questions/can-t-start-nginx-job-for-nginx-service-failed" target="_blank" rel="noopener">https://www.digitalocean.com/community/questions/can-t-start-nginx-job-for-nginx-service-failed</a></li>
</ul>
</li>
<li><p>我这里同时启动 apache2 和nginx 因apache2无用我停止了</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之 google&amp;百度 收录篇 | 站点地图 收录 SEO</title>
    <url>/cn/835650620.html</url>
    <content><![CDATA[<p>验证是否收录:<br>在百度、google 搜索框输入</p>
<p>site:您的网站<br>显示有东西即已被收录</p>
<ul>
<li><a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">百度资源搜索平台</a></li>
<li><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">google search console</a></li>
</ul>
<ul>
<li><a href="https://blog.csdn.net/qq_32454537/article/details/79482914" target="_blank" rel="noopener">https://blog.csdn.net/qq_32454537/article/details/79482914</a></li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>百度收录</tag>
        <tag>Google收录</tag>
      </tags>
  </entry>
  <entry>
    <title>git仓库修改是否忽略大小写</title>
    <url>/cn/4086114225.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>Git仓库忽略大小写配置</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><ul>
<li>设置 项目路径/.git/config 文件中[Code]项下ignorecase = false</li>
</ul>
<h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><ul>
<li><p>Sourcetree</p>
<ol>
<li>进入Sourcetree, 并进入仓库</li>
<li>点击设置-仓库设置-编辑配置文件</li>
<li>使用文本工具打开(最好非记事本)</li>
<li>更改 [Code]项下 ignorecase = false</li>
<li>保存关闭即可</li>
</ol>
</li>
<li><p>直接更改文件</p>
<ol>
<li>找到项目目录下</li>
<li>有一个隐藏文件 .git, 可开启可查看隐藏文件夹/直接在目录输入 项目根路径/.git 在文件资源管理器上路径直接输入</li>
<li>找到 config文件, 打开更改同上</li>
<li>保存关机即可</li>
</ol>
</li>
<li><p>远端如有存在文件处理方案</p>
<ol>
<li>在其他目录备份文件/文件夹</li>
<li>删除文件/文件夹 并提交</li>
<li>更改为想要的大小写命名并复制进项目</li>
<li>提交</li>
<li>推送远端即可</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft store应用商店无法加载页面代码 0x80131500</title>
    <url>/cn/46296405.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>Microsoft store应用商店无法加载页面代码: 0x80131500</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><ol>
<li>调整网络连接 <blockquote>
<p>执行命令 netsh winsock reset 并重启</p>
<ol start="2">
<li>更改DNS</li>
<li>清理应用商店的缓存<br>执行命令 WSReset.exe</li>
<li>重置应用商店<br>设置&gt;应用&gt;应用和功能&gt;在左边的列表中找到应用商店选中&gt;高级选项&gt;重置</li>
<li>调整 Internet 选项 - 高级<br>勾选 “使用SSL 3.0”、”使用 TLS 1.0“、”使用 TLS 1.1“、”使用 TLS 1.2“，应用后重启电脑</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://blog.csdn.net/han12398766/article/details/88068036" target="_blank" rel="noopener">https://blog.csdn.net/han12398766/article/details/88068036</a></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Microsoft store报错</tag>
      </tags>
  </entry>
  <entry>
    <title>VS 完全清理 Resharper 并恢复VS提示功能</title>
    <url>/cn/661710306.html</url>
    <content><![CDATA[<ul>
<li><p>VS2010的智能提示没有了的可能原因<br><a href="https://www.cnblogs.com/liuzhendong/archive/2012/06/28/2567584.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuzhendong/archive/2012/06/28/2567584.html</a></p>
</li>
<li><p>VS停用ReSharper<br><a href="https://www.cnblogs.com/--zl--/p/8479692.html" target="_blank" rel="noopener">https://www.cnblogs.com/--zl--/p/8479692.html</a></p>
</li>
<li><p>卸载Resharper<br><a href="https://blog.csdn.net/supluo/article/details/25687231" target="_blank" rel="noopener">https://blog.csdn.net/supluo/article/details/25687231</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>resharper</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 常用命令</title>
    <url>/cn/nginx.html</url>
    <content><![CDATA[<ul>
<li><p>Nginx 综合命令</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/nginx start</span><br><span class="line">$ /etc/init.d/nginx stop</span><br><span class="line">$ /etc/init.d/nginx restart</span><br><span class="line">$ nginx　　启动nginx</span><br><span class="line">$ nginx -v　　查看版本</span><br><span class="line">$ nginx -t　　测试配置文件是否有语法上的错误等</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新加载配置文件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        $ /etc/init.d/nginx -s reload </span><br><span class="line">        $ ngxin -s reload</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line">- 停止nginx</span><br></pre></td></tr></table></figure>

<pre><code>$ /etc/init.d/nginx -s stop
$ ngxin -s stop</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 查看nginx 进程运行情况</span><br></pre></td></tr></table></figure>

<pre><code>$ ps -ef |grep nginx</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- Nginx 服务</span><br></pre></td></tr></table></figure>

<pre><code>$ service nginx start
$ service nginx stop
$ service nginx restart</code></pre><pre><code></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>command</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/cn/linux.html</url>
    <content><![CDATA[<h2 id="查看端口-进程"><a href="#查看端口-进程" class="headerlink" title="查看端口/进程"></a>查看端口/进程</h2><ul>
<li><p>查看所有进程和端口使用情况</p>
<ul>
<li>netstat –apn</li>
</ul>
</li>
<li><p>用于查看某一端口的占用情况</p>
<ul>
<li>lsof -i:端口号 </li>
</ul>
</li>
<li><p>用于查看指定的端口号的进程情况</p>
<ul>
<li>netstat -tunlp |grep 端口号</li>
</ul>
</li>
<li><p>根据程序名称查询端口占用情况</p>
<ul>
<li>ps -aux | grep 程序名称 #查看所有状态</li>
<li>ps -ef | grep 程序名称 #查看所有进程CMD进程信息</li>
<li>pgrep 程序名称 </li>
</ul>
</li>
<li><p>杀死进程</p>
<ul>
<li>kill -s 9 PID  #-s 9 制定了传递给进程的信号是9，即强制、尽快终止进程  </li>
</ul>
</li>
<li><p>查看 xxx服务是否启动</p>
<ul>
<li>systemctl status docker 查看状态</li>
<li>systemctl start docker 启动</li>
</ul>
</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul>
<li><p>实时查看日志</p>
<ul>
<li>tail -f 文件名称</li>
</ul>
</li>
<li><p>查看系统日志 journalctl -xe</p>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/FtLcT7PXlfwHKyTEKvnQxQ" target="_blank" rel="noopener">Linux 最常用命令：解决 95% 以上的问题</a></li>
<li><a href="https://www.cnblogs.com/liaojie970/p/7131043.html" target="_blank" rel="noopener">Linux下强制杀死进程的方法</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器进程管理supervisor问题总结记录</title>
    <url>/cn/2813305416.html</url>
    <content><![CDATA[<p>Q1: Supervisorctl error: unix:///var/run/supervisord.sock refused connection?</p>
<p>A1: 指定配置文件 supervisord -c /etc/supervisor/supervisord.conf<br>清理无用配置因配置错误导致无法启动</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>command</tag>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>API压力测试</title>
    <url>/cn/561519743.html</url>
    <content><![CDATA[<h2 id="AD-压力命令测试"><a href="#AD-压力命令测试" class="headerlink" title="AD 压力命令测试"></a>AD 压力命令测试</h2><ul>
<li><p>服务器安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install netatalk</span><br><span class="line">apt install apache2-utils</span><br></pre></td></tr></table></figure>
</li>
<li><p>参考:</p>
<ul>
<li><a href="https://www.cnblogs.com/yueminghai/p/6412254.html" target="_blank" rel="noopener">https://www.cnblogs.com/yueminghai/p/6412254.html</a></li>
<li><a href="https://www.jianshu.com/p/30759d722103" target="_blank" rel="noopener">https://www.jianshu.com/p/30759d722103</a></li>
</ul>
</li>
<li><p>ab -c 10 -n 100 <a href="https://api.gameplus.org.cn/v1/test" target="_blank" rel="noopener">https://api.gameplus.org.cn/v1/test</a></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c10表示并发用户数为10</span><br><span class="line"></span><br><span class="line">-n100表示请求总数为100</span><br><span class="line"></span><br><span class="line">https://api.gameplus.org.cn/v1/test表示请求的目标URL</span><br></pre></td></tr></table></figure>

<p>ab -c 100 -n 10 <a href="https://api.gameplus.org.cn/v1/test" target="_blank" rel="noopener">https://api.gameplus.org.cn/v1/test</a><br>ab -c 100 -n 10 <a href="https://api.gameplus.org.cn/v1/test" target="_blank" rel="noopener">https://api.gameplus.org.cn/v1/test</a></p>
<h2 id="Postman-压力测试"><a href="#Postman-压力测试" class="headerlink" title="Postman 压力测试"></a>Postman 压力测试</h2><p>敬请期待</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>api压测</tag>
        <tag>command</tag>
        <tag>压力测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/cn/docker.html</url>
    <content><![CDATA[<ul>
<li><p>apt-cache madison docker-ce 查看那些版本</p>
</li>
<li><p>sudo apt-get install docker-ce=<version> 安装指定版本</version></p>
</li>
<li><p>docker images：查看已经安装的 docker 镜像。</p>
</li>
<li><p>docker image rm image_id：删除镜像。</p>
</li>
<li><p>docker pull：获取镜像。</p>
</li>
<li><p>docker search：从仓库查找镜像文件。</p>
</li>
<li><p>docker exec –it fID bash：进入 docker 容器内部。 </p>
</li>
<li><p>docker exec -it dockermysql bash 进入容器内部</p>
<ul>
<li><p>注意事项</p>
<ol>
<li><p>在windows 报错</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the input device is not a TTY.  If you are using mintty, try prefixing the command with &apos;winpty&apos;</span><br></pre></td></tr></table></figure>

<ul>
<li>解决方案: 命令前加 winpty 执行</li>
</ul>
</li>
<li><p>exit 退出</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>docker run：运行 docker 镜像。</p>
</li>
<li><p>docker ps：查看运行容器进程。</p>
</li>
<li><p>docker run –d：在后台运行 docker 镜像。</p>
</li>
<li><p>docker run –p：3306:3306 端口映射。</p>
</li>
<li><p>docker stop ID：停止正在运行的容器。</p>
</li>
</ul>
<ul>
<li>添加一个 docker network <figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker network create nginx-proxy</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="Docker-Mysql"><a href="#Docker-Mysql" class="headerlink" title="Docker-Mysql"></a>Docker-Mysql</h2><ul>
<li><p>命令说明：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf </span><br><span class="line">-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs</span><br><span class="line">-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=000000：初始化 root 用户的密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取</p>
  <figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull hub.c.<span class="number">163</span>.com/library/mysql:latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
  <figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 -d hub.c.163.com/library/mysql</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 3306:3306 --name mysql -v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d -v <span class="variable">$PWD</span>/logs:/logs -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=000000 -d hub.c.163.com/library/mysql:5.6</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="常用docker-mysql-ubuntu-进入docker中操作mysql-命令"><a href="#常用docker-mysql-ubuntu-进入docker中操作mysql-命令" class="headerlink" title="常用docker-mysql(ubuntu 进入docker中操作mysql)命令"></a>常用docker-mysql(ubuntu 进入docker中操作mysql)命令</h3><ul>
<li><p>查看当前运行的docker-mysql容器image或者启动时指定的name 并复制</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器内, 当进入后看到 /# 或 /$ 代表已经进入</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">docker exec -it 823c967e60ca bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接mysql, 当看到 mysql&gt; 代表已经进入mysql</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p000000</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出</p>
<ul>
<li>exit 退出mysql</li>
<li>在执行exit 退出 docker-mysql 容器 </li>
</ul>
</li>
</ul>
<hr>
<h2 id="Docker-redis"><a href="#Docker-redis" class="headerlink" title="Docker-redis"></a>Docker-redis</h2><ul>
<li><p>参考: </p>
<ul>
<li><a href="https://www.cnblogs.com/lysongbo/p/9506782.html" target="_blank" rel="noopener">https://www.cnblogs.com/lysongbo/p/9506782.html</a></li>
<li>菜鸟教程: <a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-install.html</a></li>
</ul>
</li>
<li><p>拉取</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull hub.c.163.com/library/redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name redis hub.c.163.com/library/redis</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>command</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 常用命令</title>
    <url>/cn/mysql.html</url>
    <content><![CDATA[<h2 id="SQL命令的使用规则"><a href="#SQL命令的使用规则" class="headerlink" title="SQL命令的使用规则"></a>SQL命令的使用规则</h2><p>1、每条SQL命令必须以 ; 结尾<br>2、SQL命令不区分字母大小写<br>3、使用 \c 来终止当前命令的执行</p>
<ul>
<li>登录  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -u用户名 -p</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="库相关"><a href="#库相关" class="headerlink" title="库相关"></a>库相关</h3><ul>
<li>查看当前所在库  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ select database();</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>查看所有库</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ show datatables;</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换库</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        $ use 库名称;</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line">- 创建库</span><br></pre></td></tr></table></figure>

<pre><code>$ create database gp_dev default charset=utf8;</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 表相关 </span><br><span class="line"></span><br><span class="line">- 查看所有数据</span><br></pre></td></tr></table></figure>

<pre><code>$ select * from 表名称</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 查看指定列 表中所有数据</span><br></pre></td></tr></table></figure>

<pre><code>$ select 列名称(逗号区分) from 表名称</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 查看表结构</span><br></pre></td></tr></table></figure>

<pre><code>$ desc 表名称</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">## 用户相关</span><br><span class="line">- 查看用户</span><br></pre></td></tr></table></figure>

<p>  mysql&gt; select host,user,authentication_string from mysql.user;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 创建用户</span><br></pre></td></tr></table></figure>

<p>  mysql&gt; create user “username”@”localhost” identified by “password”;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; host=&quot;localhost&quot;为本地登录用户，host=&quot;ip&quot;为ip地址登录，host=&quot;%&quot;，为外网ip登录</span><br><span class="line"></span><br><span class="line">- e.g.</span><br></pre></td></tr></table></figure>

<pre><code>mysql&gt; create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123&apos;;
mysql&gt;create user &apos;test&apos;@&apos;192.168.7.22&apos; identified by &apos;123&apos;;
mysql&gt;create user &apos;test&apos;@&apos;%&apos; identified by &apos;123&apos;;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">- 删除用户</span><br></pre></td></tr></table></figure></code></pre><p>  mysql&gt; drop user ‘username’@’host’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- 授权</span><br></pre></td></tr></table></figure>

<p>  mysql&gt; grant privileges on databasename.tablename to ‘username’@’host’ IDENTIFIED BY ‘PASSWORD’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; privileages: all priveleges 或 多个 update select等 逗号分隔 &lt;br&gt;</span><br><span class="line">&gt; on: 指定权限 库和表 \*.* == 据库名.表名 &lt;br&gt;</span><br><span class="line">&gt; IDENTIFIED 指定密码 可以省略 &lt;br&gt;</span><br><span class="line"></span><br><span class="line">- e.g.</span><br></pre></td></tr></table></figure>

<pre><code>授予用户通过外网IP对于该数据库的全部权限
mysql&gt; grant all privileges on `test`.* to &apos;test&apos;@&apos;%&apos; ;

授予用户在本地服务器对该数据库的全部权限
mysql&gt; grant all privileges on `test`.* to &apos;test&apos;@&apos;localhost&apos;;   

添加查询权限
mysql&gt; grant select on test.* to &apos;test&apos;@&apos;localhost&apos;;  

给予插入权限
mysql&gt; grant insert on test.* to &apos;test&apos;@&apos;localhost&apos;;

添加删除权限
mysql&gt; grant delete on test.* to &apos;test&apos;@&apos;localhost&apos;; 

添加更新权限
mysql&gt; grant update on test.* to &apos;test&apos;@&apos;localhost&apos;;

刷新权限
mysql&gt; flush privileges;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         </span><br><span class="line"></span><br><span class="line">- 查看权限</span><br></pre></td></tr></table></figure></code></pre><p>  查看所有用户权限<br>  mysql&gt; show grants;</p>
<p>  查看某个用户权限<br>  mysql&gt; show grants for ‘username’@’host’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line"></span><br><span class="line">- 删除权限</span><br></pre></td></tr></table></figure>

<p>  mysql&gt; revoke privileges on databasename.tablename from ‘username’@’host’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e.g.</span><br></pre></td></tr></table></figure>

<pre><code>revoke delete on test.* from &apos;test&apos;@&apos;localhost&apos;;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 更改用户名</span><br></pre></td></tr></table></figure></code></pre><p>  mysql&gt; rename user ‘test’@’%’ to ‘test2’@’%’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 更改密码</span><br></pre></td></tr></table></figure>

<p>  mysql&gt; SET PASSWORD FOR ‘test’@’localhost’ = PASSWORD(‘123456’);</p>
<pre><code>
</code></pre></li>
</ul>
<h2 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h2><ul>
<li>Q: pycharm中python3.6+pymysql+mysql8.0.1连接报错<ol>
<li>命令行连接 mysql -uroot -p123456</li>
<li>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>command</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Wordpress建站问题总结记录</title>
    <url>/cn/683599947.html</url>
    <content><![CDATA[<h2 id="Wordpress-仪表盘-设置更改固定连接后无法访问了-更改未进行备案域名-未进行Nginx反向代理"><a href="#Wordpress-仪表盘-设置更改固定连接后无法访问了-更改未进行备案域名-未进行Nginx反向代理" class="headerlink" title="Wordpress] 仪表盘 - 设置更改固定连接后无法访问了 (更改未进行备案域名/未进行Nginx反向代理)"></a>Wordpress] 仪表盘 - 设置更改固定连接后无法访问了 (更改未进行备案域名/未进行Nginx反向代理)</h2><ul>
<li><p>问题产生原因: 如果更改为域名(例如未进行备案域名) 因域名无法直接访问, 模拟请求过程</p>
<ol>
<li>PC电脑浏览器输入 IP:端口  </li>
<li>Wordpress 收到请求后自动重定向设置的域名, 这时候域名无解析/未备案导致无法访问所以界面显示 404 或其他界面.</li>
</ol>
</li>
<li><p>解决方案</p>
<ol>
<li><p>登录云服务器</p>
</li>
<li><p>进入Docker-MySql</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看正在运行的 docker进程</span><br><span class="line">    $ docker ps </span><br><span class="line">进入docker镜像内部</span><br><span class="line">    $ docker exec -it fId bash</span><br><span class="line">    如果启动镜像时指定name 则可以以name方式进入</span><br><span class="line">    $ docker exec -it wp(启动时候的名称) bash 进入docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>fId 为运行时第一个 12位字母数字混合组合<br>当看到 /$ 代表以及在此项docker中, exit退出</p>
</blockquote>
</li>
<li><p>登入MySql, 进入数据库, 执行更新命令</p>
<ol>
<li><p>登录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>回车并输入密码(密码无显示的) 启动mysql时的密码 </p>
<blockquote>
<p>如启动用户名不一样则 mysql -u用户名 -p<br>显示 mysql &gt; 则代表以进入</p>
</blockquote>
</li>
<li><p>进入数据库(要选择操控那个库)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> show databales;    查看所有的库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> use wordpress;     进入 wordpress</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>显示 Database changed 代表切换成功</p>
</blockquote>
</li>
<li><p>进入库后(必须切换要操作的库), 执行命令</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看所有的表  wp_options 中</span><br><span class="line">    $ show tables;   </span><br><span class="line">查看表中数据当前是什么</span><br><span class="line">    $ select * from wp_option where option_id=1;</span><br><span class="line">如忘记设置什么 这样查看 一般都是第一个option_value中域名 </span><br><span class="line">    $ select * from wp_otion where option_value=‘从仪表盘设置的域名/IP’;</span><br><span class="line">    $ select * from wp_otion where option_value link ‘%xx%’;   模糊查询 %是匹配所有前面有东西的</span><br><span class="line">更新命令  UPDATE 表名称 SET 字段=值  where 约束更改那些</span><br><span class="line">    $ UPDATE wp_options SET option_value = replace( option_value, 'http://旧域名', 'http://新域名' ) WHERE option_name = 'home' OR option_name = 'siteurl';</span><br><span class="line">    $ UPDATE wp_posts SET post_content = replace( post_content, 'http://旧域名', 'http://新域名' ) ;</span><br><span class="line">    $ UPDATE wp_posts SET guid = replace( guid, 'http://旧域名', 'http://新域名' ) ;</span><br><span class="line"></span><br><span class="line">    $ UPDATE wp_comments SET comment_content = replace(comment_content, 'http://旧域名', 'http://新域名') ;</span><br><span class="line">    $ UPDATE wp_comments SET comment_author_url = replace(comment_author_url, 'http://旧域名', 'http://新域名') ;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
</li>
</ul>
<hr>
<h2 id="运行后wordpress-mysql链接失败"><a href="#运行后wordpress-mysql链接失败" class="headerlink" title="运行后wordpress mysql链接失败"></a>运行后wordpress mysql链接失败</h2><ul>
<li>Q1 问题描述:</li>
</ul>
<p>启动时IP使用127.0.0.1 / localhost / 0.0.0.0 管理界面初始化时访问失败<br>Docker-Wordpress连接 Docker-mysql</p>
<ul>
<li>A1 解决方案</li>
</ul>
<p>创建一个 docker新网络 查看docker IP后重新启动</p>
<ol>
<li><p>添加一个 docker network </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker network create docker-mysql-net</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看网络IP ifconfig 并记住 尝试使用新建的ip去连接</p>
</li>
</ol>
<ul>
<li>例如: 重新启动wordpress</li>
</ul>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">$ WORDPRESS_DB_HOST=<span class="number">172.18</span>.<span class="number">0.1</span>:<span class="number">3306</span> -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=<span class="number">123456</span>-e WORDPRESS_DB_NAME=wordpress-p <span class="number">8050</span>:<span class="number">80</span> -d hub.c.<span class="number">163</span>.com/library/wordpress  </span><br><span class="line">注意其他配置都和之前运行一样 但是WORDPRESS_DB_HOST使用ifconfig查看的docker IP 启动</span><br></pre></td></tr></table></figure>

<p>上述尝试之后还是无法解决排除问题</p>
<p>尝试 root 连接<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h0.0.0.0 -uroot -p密码</span><br></pre></td></tr></table></figure></p>
<p>root可连接,但是自己新建的账号无法连接</p>
<ul>
<li>A2 解决方案<br>请对用户授权 %因权限不足,请授权, docker是归属一个单独的虚拟环境中网络Ip非127.0.0.1 localhost 所以需要授权%</li>
</ul>
<ol>
<li><p>root 连接进入</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h0.0.0.0 -uroot -p 密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on `数据库名称`.* to &apos;用户名称&apos;@&apos;%&apos; ;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>docker</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之 部署篇</title>
    <url>/cn/844841121.html</url>
    <content><![CDATA[<h2 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h2><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs(8.0.2+)</a><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a></li>
</ul>
</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Git(2.13.1+)</a></li>
</ul>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ul>
<li>clone 文档项目</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/CnTDou/tdou.cc.git tdou_cc</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装项目依赖包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> tdou_cc &amp;&amp; npm install &amp;&amp; npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<ul>
<li>因当前项目主题是基于子模块引用更新子模块</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init --recursive</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动开发者服务器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure>

<p>如果您打开浏览器并访问<code>http://localhost:4000</code>,您应该看到文档网站已启动并正在运行。</p>
<ul>
<li>分支说明<ul>
<li><strong><em>maseter</em></strong>  hexo自动部署&amp;github-pages</li>
<li><strong><em>v1.0</em></strong> 当前项目源文件</li>
</ul>
</li>
</ul>
<ul>
<li>其他命令 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init                # 初始化，安装所需包</span><br><span class="line">npm install              # 其实此句不是必须，新版本的Hexo在初始化时就安装好了依赖包)</span><br><span class="line"></span><br><span class="line">hexo n          # 新建文章，在\source\_posts文件夹里</span><br><span class="line">hexo new page   # 新建页面，比如想在导航栏新增一个“关于我”的页面</span><br><span class="line">hexo clean      # 清除本地的数据库和生成的public文件夹</span><br><span class="line">hexo g          # 生成博客文件</span><br><span class="line">hexo s          # 运行在本地浏览器，可当预览使用</span><br><span class="line">hexo d          # 部署博客到Github等</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>功能:<ul>
<li><a href>gulp压缩优化</a></li>
<li><a href>travis自动部署</a></li>
<li><a href>Disqus评论</a></li>
<li><a href>google&amp;百度收录</a><ul>
<li><a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">百度资源搜索平台</a></li>
<li><a href="https://search.google.com/" target="_blank" rel="noopener">google search console</a></li>
</ul>
</li>
<li><a href>Google Analytics and 百度统计</a><ul>
<li><a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计</a></li>
<li><a href="https://analytics.withgoogle.com" target="_blank" rel="noopener">Google Analytics</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>FAQ</p>
<ul>
<li><p>Q: not code-js</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install core-js@2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Q: hexo d 无响应了</p>
<blockquote>
<p>检查 _config.yml git 配置是否 ssh</p>
</blockquote>
</li>
</ul>
</li>
<li><p>接入评论</p>
<ul>
<li><a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">https://www.jianshu.com/p/57afa4844aaa</a></li>
<li><a href="https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</a></li>
</ul>
</li>
</ul>
<ul>
<li>参考<ul>
<li><a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment</a></li>
<li><a href="https://www.jianshu.com/p/2b09156ee5b1" target="_blank" rel="noopener">https://www.jianshu.com/p/2b09156ee5b1</a></li>
<li><a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">Gitment评论功能接入</a></li>
<li><a href="https://blog.csdn.net/u012040909/article/details/79929542" target="_blank" rel="noopener">https://blog.csdn.net/u012040909/article/details/79929542</a></li>
<li><a href="https://blog.csdn.net/nqmysbd/article/details/88764425" target="_blank" rel="noopener">https://blog.csdn.net/nqmysbd/article/details/88764425</a></li>
<li><a href="https://www.jianshu.com/p/9a137d8e554a" target="_blank" rel="noopener">hexo d -g 踩坑记</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Wordpress建站教程</title>
    <url>/cn/docker_wordpress.html</url>
    <content><![CDATA[<ul>
<li>运行环境<ul>
<li>Docker</li>
<li>Docker-Mysql</li>
<li>Docker-Wordpress</li>
<li>Ubuntu 18.04</li>
</ul>
</li>
</ul>
<h2 id="Docker-常用名称"><a href="#Docker-常用名称" class="headerlink" title="Docker 常用名称"></a>Docker 常用名称</h2><ul>
<li>详情查看Docker 常用命令一篇</li>
</ul>
<h2 id="Docker-Mysql"><a href="#Docker-Mysql" class="headerlink" title="Docker-Mysql"></a>Docker-Mysql</h2><ul>
<li>参数汇总<ul>
<li>MYSQL_ROOT_PASSWORD：设置 mysql 数据库的密码。</li>
<li>MYSQL_DATABASE：设置 mysql 的数据库名称。</li>
<li>MYSQL_USER：设置 mysql 的数据库用户。</li>
</ul>
</li>
</ul>
<h2 id="Docker-Wordpress"><a href="#Docker-Wordpress" class="headerlink" title="Docker-Wordpress"></a>Docker-Wordpress</h2><ul>
<li><p>参数汇总</p>
<ul>
<li>WORDPRESS_DB_HOST：wordpress 连接数据库的参数默认 ip：port <blockquote>
<p>! 注意 此项IP 使用 ifconfig 查看 docker0 ip多少</p>
</blockquote>
</li>
<li>WORDPRESS_DB_USER：wordpress 连接数据库的用户 </li>
<li>WORDPRESS_DB_PASSWORD：wordpress 连接数据库的密码</li>
<li>WORDPRESS_DB_NAME：wordpress 数据库的名称默认为：wordpress</li>
</ul>
</li>
<li><p>安装命令</p>
<blockquote>
<p>docker pull hub.c.163.com/library/wordpress:latest<br>docker pull hub.c.163.com/library/mysql:latest</p>
</blockquote>
</li>
<li><p>启动命令</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 -e MYSQL_DATABASE=wordpress -d hub.c.163.com/library/mysql</span><br><span class="line"> </span><br><span class="line">docker run --name wp -p 8050:80 -e WORDPRESS_DB_HOST=服务器内外IP:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 -e WORDPRESS_DB_NAME=wordpress -d wordpress</span><br><span class="line"></span><br><span class="line">注意 此处的WORDPRESS_DB_HOST地址为 服务器的内外地址 不可写 127.0.0.1 0.0.0.0 localhost  因为这地址是代表在docker内部的 运行一个镜像 内部所有的环境都是独立的 可以看成一个服务器 运行docker镜像后 这个docker镜像的所有都是独立的</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新域名</p>
<ul>
<li>查看 <a href="https://tdou.cc/" target="_blank" rel="noopener">Docker-Wordpress建站问题总结记录</a>@{docker域名/IP更新}</li>
</ul>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.51cto.com/14314637/2406710?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/14314637/2406710?source=dra</a></li>
<li><a href="https://blog.csdn.net/xiaoping0915/article/details/79515309" target="_blank" rel="noopener">https://blog.csdn.net/xiaoping0915/article/details/79515309</a></li>
<li><a href="https://blog.csdn.net/f59130/article/details/74014260" target="_blank" rel="noopener">https://blog.csdn.net/f59130/article/details/74014260</a></li>
<li><a href="https://blog.csdn.net/longzhoufeng/article/details/82421322" target="_blank" rel="noopener">Ubuntu安装与卸载docker</a></li>
</ul>
<ol>
<li>gitbook@{一念成魔} - <a href="https://gitbook.cn/books/5b63feefd66d4772839a2418/index.html" target="_blank" rel="noopener">Docker 入门之个人博客搭建教程</a></li>
<li>菜鸟教程 - <a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">Docker教程</a></li>
<li><a href="https://blog.csdn.net/satomic/article/details/79117954" target="_blank" rel="noopener">https://blog.csdn.net/satomic/article/details/79117954</a> </li>
<li><a href="https://www.linuxidc.com/inux/2017-07/145699.htm" target="_blank" rel="noopener">https://www.linuxidc.com/inux/2017-07/145699.htm</a></li>
</ol>
]]></content>
      <categories>
        <category>建站教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity踩坑记录</title>
    <url>/cn/2972254746.html</url>
    <content><![CDATA[<hr>
<ul>
<li>Q1: Unity 打包 Android或其他平台 报错I2CPP 失败？</li>
<li>A1:检查项目中是否使用  [DllImport(“__Internal”)]  添加 ios宏定义</li>
</ul>
<hr>
<ul>
<li>Q2: 基于Animation 动态创建AnimationClip 的动画,编辑器无问题, 真机出现报错<blockquote>
<p>“Can’t use AnimationClip::SetCurve at Runtime on<br>non Legacy AnimationClips”</p>
</blockquote>
</li>
</ul>
<ol>
<li>设置clip.legacy=true 在new AnimationClip 之后立马赋值</li>
<li>Set属性命名问题 使用<a href="https://baike.baidu.com/item/%E5%8C%88%E7%89%99%E5%88%A9%E5%91%BD%E5%90%8D%E6%B3%95/7632397?fr=aladdin" target="_blank" rel="noopener">匈牙利命名法</a>来set属性</li>
</ol>
<ul>
<li>参考: <a href="https://www.jianshu.com/p/5d293c791f30" target="_blank" rel="noopener">https://www.jianshu.com/p/5d293c791f30</a> </li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>生活小妙招-如何选择快递</title>
    <url>/cn/3580450979.html</url>
    <content><![CDATA[<p>南方寄北方选 [圆通]</p>
<p>北方寄南方选 [申通]</p>
<p>南方寄南方选 [申通]</p>
<p>全国发广东 发顺丰比申通还慢</p>
<p>广东发往东北三省 选申通 送你2个字 [等吧]</p>
<p>韵达申通犹豫选 [韵达]</p>
<p>便宜找 [汇通]</p>
]]></content>
      <tags>
        <tag>生活小妙招</tag>
      </tags>
  </entry>
  <entry>
    <title>访问Github样式丢失</title>
    <url>/cn/4064631948.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哎提起来就伤心, 本人居住在北京(某某公寓), 使用的changchen带宽, 100/月(吐槽坑人的房栋)无法自己拉网线</p>
<p>打开电脑, 开启一个程序员必备网站(github), 咦这是什么鬼()</p>
<p>然后网上各种搜索方案, 更改hosts</p>
<p>改完之后不行 失败哎 纠结</p>
<p>突然想起来坑人的带宽,那热点试一下, 咦OK了  然后… 一个月跑了 50G流量 (5555.. 扛不住哎)</p>
<p>哎不说废话了 开始说方案吧</p>
<hr>
<h2 id="华丽的分割线"><a href="#华丽的分割线" class="headerlink" title="华丽的分割线"></a><strong><em>华丽的分割线</em></strong></h2><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>浏览器访问Github界面错乱(css丢失)<br>以下方法都尝试过后还不行, 联系网络服务商咨询/换电脑尝试(我的网络服务商给后台禁止, 出现情况我为手机分享热点可以连接带宽网络不行)</p>
<ul>
<li><p>hosts 中删除 github 或更改对应IP</p>
</li>
<li><p>mac: “/private/etc/hosts”</p>
</li>
<li><p>windows:”C:\Windows\System32\drivers\etc\hosts”</p>
</li>
<li><p>192.30.253.112 github.com     </p>
<blockquote>
<p><a href="http://github.com.ipaddress.com/" target="_blank" rel="noopener">IP查询</a></p>
</blockquote>
</li>
<li><p>151.101.113.194 github.global.ssl.fastly.net     </p>
<blockquote>
<p><a href="http://github.global.ssl.fastly.net.ipaddress.com/" target="_blank" rel="noopener">IP查询</a></p>
</blockquote>
</li>
<li><p>刷新缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windowns</span><br><span class="line">$ ipconfig /flushdns</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>以上方案不行 尝试一下方案</p>
<hr>
<h2 id="华丽的分割线-1"><a href="#华丽的分割线-1" class="headerlink" title="华丽的分割线"></a><strong><em>华丽的分割线</em></strong></h2><ol>
<li><p>更改 hosts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">151.101.12.133 assets-cdn.github.com</span><br><span class="line">151.101.12.133 avatars3.githubusercontent.com</span><br><span class="line">151.101.12.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.12.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.12.133 avatars2.githubusercontent</span><br></pre></td></tr></table></figure>
</li>
<li><p>让hosts生效 刷新缓存(dns)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Windows (开始 -&gt; 运行 -&gt; 输入cmd -&gt; 在CMD窗口输入)</span><br><span class="line">ipconfig /flushdns</span><br><span class="line"></span><br><span class="line">Linux (终端输入)</span><br><span class="line">sudo rcnscd restart</span><br><span class="line"></span><br><span class="line">Mac OS X终端输入 ： </span><br><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul>
<li><a href="https://blog.csdn.net/chl191623691/article/details/80155135" target="_blank" rel="noopener">https://blog.csdn.net/chl191623691/article/details/80155135</a></li>
<li><a href="https://blog.csdn.net/dongxiaocong/article/details/81450839" target="_blank" rel="noopener">https://blog.csdn.net/dongxiaocong/article/details/81450839</a></li>
</ul>
<hr>
<h2 id="又一个华丽的分割线"><a href="#又一个华丽的分割线" class="headerlink" title="又一个华丽的分割线"></a><strong><em>又一个华丽的分割线</em></strong></h2><p><strong><em>其他：断网，再开网；</em></strong></p>
<p><strong><em>终极方法： 重启机器；</em></strong></p>
<p>![注意注意] 经过测试 发现 还是没什么卵用,流量可以但是wifi不行,我应该肯定带宽供应商那边有问题的了.</p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建(Hexo+replica主题) 之 CI持续集成篇 | travis-ci 持续集成 github自动部署</title>
    <url>/cn/3108162835.html</url>
    <content><![CDATA[<hr>
<ul>
<li>Q1:安装travis中报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem install travis</span><br><span class="line"></span><br><span class="line">ERROR:  While executing gem ... (Gem::FilePermissionError)</span><br><span class="line">    You don<span class="string">'t have write permissions for the /Library/Ruby/Gems/2.3.0 directory.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>A1: 权限不足</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gem install travis</span><br><span class="line">或</span><br><span class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin travis</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><p>Q2: travis 未授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ travis login --auto</span><br><span class="line"></span><br><span class="line">(you github name) has not granted Travis CI the required permissions, please <span class="built_in">log</span> <span class="keyword">in</span> via travis-ci.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>A2: 去 travis 授权 </p>
<ol>
<li>登录官网  <a href="https://www.travis-ci.com/" target="_blank" rel="noopener">https://www.travis-ci.com/</a></li>
<li>github 登录自动关联</li>
<li>重试即可成功</li>
</ol>
</li>
<li><p>A3: 打开后始终 404 没有样式 ,怀疑主题问题 在 travis 中 主题并没有pull,我定制化更改主题一些内容还无法使用源主题,所以我基于git 子模块方式去实现</p>
<ol>
<li>fork 源项目</li>
<li>新建一个分支 更改并push</li>
<li>在本机 git submodule init</li>
<li>git submodule add <a href="https://github.com/Kylin-Studio/hexo-theme-replica.git" target="_blank" rel="noopener">https://github.com/Kylin-Studio/hexo-theme-replica.git</a> /theme/replica<ul>
<li>注意 此处使用 https 形式 并且主题是开放开源的, 如私有自查解决方案</li>
</ul>
</li>
<li>git add .gitmodules</li>
<li>git commit -m “add submodules”</li>
<li>git push  自动打包成功</li>
</ol>
</li>
<li><p>A4: travis 部署gulp 无法压缩</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">before_install:</span><br><span class="line"># - npm install -g gulp  # 初次或删除缓存时取消注释</span><br><span class="line"></span><br><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="优化-使用gulp-压缩"><a href="#优化-使用gulp-压缩" class="headerlink" title="优化 使用gulp 压缩"></a>优化 使用gulp 压缩</h2><ul>
<li><a href="https://blog.csdn.net/edc3001/article/details/86078572" target="_blank" rel="noopener">gulp 4的坑</a></li>
</ul>
<ul>
<li><p>参考: </p>
<ul>
<li><a href="https://www.imooc.com/article/45514" target="_blank" rel="noopener">Hexo+Next主题搭建博客安装美化及SEO优化指南</a></li>
<li>[github coding 同时部署] (<a href="https://www.jianshu.com/p/a530cd48a059" target="_blank" rel="noopener">https://www.jianshu.com/p/a530cd48a059</a>)</li>
<li><a href="https://blog.csdn.net/qq_23079443/article/details/79015225" target="_blank" rel="noopener">https://blog.csdn.net/qq_23079443/article/details/79015225</a></li>
<li><a href="https://blog.i1hao.com/2018/09/01/hexo-and-githubpages-best-practices/" target="_blank" rel="noopener">https://blog.i1hao.com/2018/09/01/hexo-and-githubpages-best-practices/</a></li>
<li><a href="https://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></li>
<li><a href="https://www.jianshu.com/p/38ee582bd0ea" target="_blank" rel="noopener">通过Travis来自动构建博客</a></li>
<li><a href="https://www.jianshu.com/p/7f05b452fd3a" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hexo(1)</a></li>
<li><a href="https://www.jianshu.com/p/fff7b3384f46" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hexo(2)</a></li>
<li><a href="https://www.jianshu.com/p/630d75e4697e" target="_blank" rel="noopener">travis自动部署排坑日记</a></li>
<li><a href="https://hacpai.com/article/1534086971693" target="_blank" rel="noopener">Travis-ci 远程构建 + 自动化部署</a></li>
<li><a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="noopener">用 Travis CI 自動部署網站到 GitHub</a></li>
<li><a href="https://www.cnblogs.com/morang/p/7228488.html" target="_blank" rel="noopener">使用travis-ci自动部署github上的项目</a></li>
<li><a href="https://sabrinaluo.github.io/tech/2015/12/28/travis-github-hexo/" target="_blank" rel="noopener">利用travis自动部署hexo搭建在github的博客</a></li>
</ul>
</li>
<li><p>其他部署方式:</p>
<ul>
<li><a href="https://sabrinaluo.github.io/tech/2016/06/02/travis-heroku/" target="_blank" rel="noopener">利用travis进行heroku部署</a></li>
<li><a href="https://sabrinaluo.github.io/tech/2017/08/14/react-component-with-webpack/" target="_blank" rel="noopener">用webpack打包react组件</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建(Hexo+replica主题)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>travis-ci</tag>
        <tag>持续集成</tag>
        <tag>自动部署</tag>
      </tags>
  </entry>
</search>
